// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : sim.v
// Device     : SIM
// LiteX sha1 : 3836e8a3
// Date       : 2022-10-17 17:44:35
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module vexriscv_uart (
	output wire sim_trace,
	input  wire sys_clk,
	output wire serial_source_valid,
	input  wire serial_source_ready,
	output wire [7:0] serial_source_data,
	input  wire serial_sink_valid,
	output wire serial_sink_ready,
	input  wire [7:0] serial_sink_data,
	input wire main_vexriscv6,
	input wire main_vexriscv4,
	input wire main_vexriscv3,
	output wire main_vexriscv5
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire sys_clk_1;
wire sys_rst;
wire por_clk;
reg  main_int_rst = 1'd1;
reg  main_soc_rst = 1'd0;
wire main_cpu_rst;
reg  [1:0] main_reset_storage = 2'd0;
reg  main_reset_re = 1'd0;
reg  [31:0] main_scratch_storage = 32'd305419896;
reg  main_scratch_re = 1'd0;
wire [31:0] main_bus_errors_status;
wire main_bus_errors_we;
reg  main_bus_errors_re = 1'd0;
wire main_bus_error;
reg  [31:0] main_bus_errors = 32'd0;
wire main_vexriscv_reset;
reg  [31:0] main_vexriscv_interrupt = 32'd0;
reg  main_vexriscv_ibus_aw_valid = 1'd0;
reg  main_vexriscv_ibus_aw_ready = 1'd0;
reg  main_vexriscv_ibus_aw_first = 1'd0;
reg  main_vexriscv_ibus_aw_last = 1'd0;
reg  [31:0] main_vexriscv_ibus_aw_payload_addr = 32'd0;
reg  [1:0] main_vexriscv_ibus_aw_payload_burst = 2'd0;
reg  [7:0] main_vexriscv_ibus_aw_payload_len = 8'd0;
reg  [3:0] main_vexriscv_ibus_aw_payload_size = 4'd0;
reg  [1:0] main_vexriscv_ibus_aw_payload_lock = 2'd0;
reg  [2:0] main_vexriscv_ibus_aw_payload_prot = 3'd0;
reg  [3:0] main_vexriscv_ibus_aw_payload_cache = 4'd0;
reg  [3:0] main_vexriscv_ibus_aw_payload_qos = 4'd0;
reg  [3:0] main_vexriscv_ibus_aw_payload_region = 4'd0;
reg  main_vexriscv_ibus_aw_param_id = 1'd0;
reg  main_vexriscv_ibus_aw_param_dest = 1'd0;
reg  main_vexriscv_ibus_aw_param_user = 1'd0;
reg  main_vexriscv_ibus_w_valid = 1'd0;
reg  main_vexriscv_ibus_w_ready = 1'd0;
reg  main_vexriscv_ibus_w_last = 1'd0;
reg  [31:0] main_vexriscv_ibus_w_payload_data = 32'd0;
reg  [3:0] main_vexriscv_ibus_w_payload_strb = 4'd0;
reg  main_vexriscv_ibus_b_valid = 1'd0;
reg  main_vexriscv_ibus_b_ready = 1'd0;
reg  [1:0] main_vexriscv_ibus_b_payload_resp = 2'd0;
reg  main_vexriscv_ibus_b_param_id = 1'd0;
wire main_vexriscv_ibus_ar_valid;
reg  main_vexriscv_ibus_ar_ready = 1'd0;
reg  main_vexriscv_ibus_ar_first = 1'd0;
reg  main_vexriscv_ibus_ar_last = 1'd0;
wire [31:0] main_vexriscv_ibus_ar_payload_addr;
wire [1:0] main_vexriscv_ibus_ar_payload_burst;
wire [7:0] main_vexriscv_ibus_ar_payload_len;
wire [3:0] main_vexriscv_ibus_ar_payload_size;
wire [1:0] main_vexriscv_ibus_ar_payload_lock;
wire [2:0] main_vexriscv_ibus_ar_payload_prot;
wire [3:0] main_vexriscv_ibus_ar_payload_cache;
wire [3:0] main_vexriscv_ibus_ar_payload_qos;
reg  [3:0] main_vexriscv_ibus_ar_payload_region = 4'd0;
wire main_vexriscv_ibus_ar_param_id;
reg  main_vexriscv_ibus_ar_param_dest = 1'd0;
reg  main_vexriscv_ibus_ar_param_user = 1'd0;
reg  main_vexriscv_ibus_r_valid = 1'd0;
wire main_vexriscv_ibus_r_ready;
reg  main_vexriscv_ibus_r_last = 1'd0;
reg  [1:0] main_vexriscv_ibus_r_payload_resp = 2'd0;
reg  [31:0] main_vexriscv_ibus_r_payload_data = 32'd0;
reg  main_vexriscv_ibus_r_param_id = 1'd0;
wire main_vexriscv_dbus_aw_valid;
reg  main_vexriscv_dbus_aw_ready = 1'd0;
reg  main_vexriscv_dbus_aw_first = 1'd0;
reg  main_vexriscv_dbus_aw_last = 1'd0;
wire [31:0] main_vexriscv_dbus_aw_payload_addr;
wire [1:0] main_vexriscv_dbus_aw_payload_burst;
wire [7:0] main_vexriscv_dbus_aw_payload_len;
wire [3:0] main_vexriscv_dbus_aw_payload_size;
wire [1:0] main_vexriscv_dbus_aw_payload_lock;
wire [2:0] main_vexriscv_dbus_aw_payload_prot;
wire [3:0] main_vexriscv_dbus_aw_payload_cache;
wire [3:0] main_vexriscv_dbus_aw_payload_qos;
reg  [3:0] main_vexriscv_dbus_aw_payload_region = 4'd0;
wire main_vexriscv_dbus_aw_param_id;
reg  main_vexriscv_dbus_aw_param_dest = 1'd0;
reg  main_vexriscv_dbus_aw_param_user = 1'd0;
wire main_vexriscv_dbus_w_valid;
reg  main_vexriscv_dbus_w_ready = 1'd0;
wire main_vexriscv_dbus_w_last;
wire [31:0] main_vexriscv_dbus_w_payload_data;
wire [3:0] main_vexriscv_dbus_w_payload_strb;
reg  main_vexriscv_dbus_b_valid = 1'd0;
wire main_vexriscv_dbus_b_ready;
reg  [1:0] main_vexriscv_dbus_b_payload_resp = 2'd0;
reg  main_vexriscv_dbus_b_param_id = 1'd0;
wire main_vexriscv_dbus_ar_valid;
reg  main_vexriscv_dbus_ar_ready = 1'd0;
reg  main_vexriscv_dbus_ar_first = 1'd0;
reg  main_vexriscv_dbus_ar_last = 1'd0;
wire [31:0] main_vexriscv_dbus_ar_payload_addr;
wire [1:0] main_vexriscv_dbus_ar_payload_burst;
wire [7:0] main_vexriscv_dbus_ar_payload_len;
wire [3:0] main_vexriscv_dbus_ar_payload_size;
wire [1:0] main_vexriscv_dbus_ar_payload_lock;
wire [2:0] main_vexriscv_dbus_ar_payload_prot;
wire [3:0] main_vexriscv_dbus_ar_payload_cache;
wire [3:0] main_vexriscv_dbus_ar_payload_qos;
reg  [3:0] main_vexriscv_dbus_ar_payload_region = 4'd0;
wire main_vexriscv_dbus_ar_param_id;
reg  main_vexriscv_dbus_ar_param_dest = 1'd0;
reg  main_vexriscv_dbus_ar_param_user = 1'd0;
reg  main_vexriscv_dbus_r_valid = 1'd0;
wire main_vexriscv_dbus_r_ready;
reg  main_vexriscv_dbus_r_last = 1'd0;
reg  [1:0] main_vexriscv_dbus_r_payload_resp = 2'd0;
reg  [31:0] main_vexriscv_dbus_r_payload_data = 32'd0;
reg  main_vexriscv_dbus_r_param_id = 1'd0;
wire main_vexriscv0;
wire main_vexriscv1;
wire main_vexriscv2;
// reg  main_vexriscv3 = 1'd0;
// reg  main_vexriscv4 = 1'd0;
// wire main_vexriscv5;
// reg  main_vexriscv6 = 1'd0;
reg  main_vexriscv7 = 1'd0;
reg  [29:0] main_interface0_adapted_interface_adr = 30'd0;
reg  [31:0] main_interface0_adapted_interface_dat_w = 32'd0;
wire [31:0] main_interface0_adapted_interface_dat_r;
reg  [3:0] main_interface0_adapted_interface_sel = 4'd0;
reg  main_interface0_adapted_interface_cyc = 1'd0;
reg  main_interface0_adapted_interface_stb = 1'd0;
wire main_interface0_adapted_interface_ack;
reg  main_interface0_adapted_interface_we = 1'd0;
reg  [2:0] main_interface0_adapted_interface_cti = 3'd0;
reg  [1:0] main_interface0_adapted_interface_bte = 2'd0;
wire main_interface0_adapted_interface_err;
reg  main_axi2wishbone0_aw_valid = 1'd0;
reg  main_axi2wishbone0_aw_ready = 1'd0;
reg  [31:0] main_axi2wishbone0_aw_payload_addr = 32'd0;
reg  main_axi2wishbone0_w_valid = 1'd0;
reg  main_axi2wishbone0_w_ready = 1'd0;
reg  [31:0] main_axi2wishbone0_w_payload_data = 32'd0;
reg  [3:0] main_axi2wishbone0_w_payload_strb = 4'd0;
reg  main_axi2wishbone0_b_valid = 1'd0;
wire main_axi2wishbone0_b_ready;
reg  [1:0] main_axi2wishbone0_b_payload_resp = 2'd0;
reg  main_axi2wishbone0_ar_valid = 1'd0;
reg  main_axi2wishbone0_ar_ready = 1'd0;
reg  [31:0] main_axi2wishbone0_ar_payload_addr = 32'd0;
reg  main_axi2wishbone0_r_valid = 1'd0;
reg  main_axi2wishbone0_r_ready = 1'd0;
reg  [1:0] main_axi2wishbone0_r_payload_resp = 2'd0;
reg  [31:0] main_axi2wishbone0_r_payload_data = 32'd0;
reg  main_axi2wishbone0_axi2axi_lite_ax_burst_valid = 1'd0;
wire main_axi2wishbone0_axi2axi_lite_ax_burst_ready;
reg  main_axi2wishbone0_axi2axi_lite_ax_burst_first = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_ax_burst_last = 1'd0;
reg  [31:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr = 32'd0;
reg  [1:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst = 2'd0;
reg  [7:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len = 8'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size = 4'd0;
reg  [1:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock = 2'd0;
reg  [2:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot = 3'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache = 4'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos = 4'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region = 4'd0;
reg  main_axi2wishbone0_axi2axi_lite_ax_burst_param_id = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_ax_burst_param_user = 1'd0;
wire main_axi2wishbone0_axi2axi_lite_ax_beat_valid;
reg  main_axi2wishbone0_axi2axi_lite_ax_beat_ready = 1'd0;
wire main_axi2wishbone0_axi2axi_lite_ax_beat_first;
wire main_axi2wishbone0_axi2axi_lite_ax_beat_last;
wire [31:0] main_axi2wishbone0_axi2axi_lite_ax_beat_payload_addr;
wire main_axi2wishbone0_axi2axi_lite_ax_beat_param_id;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_valid;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_ready;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_first;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_last;
wire [31:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_addr;
wire [1:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_burst;
wire [7:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_len;
wire [3:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_size;
wire [1:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_lock;
wire [2:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_prot;
wire [3:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_cache;
wire [3:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_qos;
wire [3:0] main_axi2wishbone0_axi2axi_lite_sink_sink_payload_region;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_param_id;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_param_dest;
wire main_axi2wishbone0_axi2axi_lite_sink_sink_param_user;
wire main_axi2wishbone0_axi2axi_lite_source_source_valid;
reg  main_axi2wishbone0_axi2axi_lite_source_source_ready = 1'd0;
wire main_axi2wishbone0_axi2axi_lite_source_source_first;
wire main_axi2wishbone0_axi2axi_lite_source_source_last;
wire [31:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_addr;
wire [1:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_burst;
wire [7:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_len;
wire [3:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_size;
wire [1:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_lock;
wire [2:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_prot;
wire [3:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_cache;
wire [3:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_qos;
wire [3:0] main_axi2wishbone0_axi2axi_lite_source_source_payload_region;
wire main_axi2wishbone0_axi2axi_lite_source_source_param_id;
wire main_axi2wishbone0_axi2axi_lite_source_source_param_dest;
wire main_axi2wishbone0_axi2axi_lite_source_source_param_user;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_valid;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_ready;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_first;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_last;
wire [31:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_addr;
wire [1:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_burst;
wire [7:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_len;
wire [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_size;
wire [1:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_lock;
wire [2:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_prot;
wire [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_cache;
wire [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_qos;
wire [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_region;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_id;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_dest;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_user;
reg  main_axi2wishbone0_axi2axi_lite_pipe_valid_source_valid = 1'd0;
wire main_axi2wishbone0_axi2axi_lite_pipe_valid_source_ready;
reg  main_axi2wishbone0_axi2axi_lite_pipe_valid_source_first = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_pipe_valid_source_last = 1'd0;
reg  [31:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_addr = 32'd0;
reg  [1:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_burst = 2'd0;
reg  [7:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_len = 8'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_size = 4'd0;
reg  [1:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_lock = 2'd0;
reg  [2:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_prot = 3'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_cache = 4'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_qos = 4'd0;
reg  [3:0] main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_region = 4'd0;
reg  main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_id = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_dest = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_user = 1'd0;
reg  [7:0] main_axi2wishbone0_axi2axi_lite_beat_count = 8'd0;
wire [11:0] main_axi2wishbone0_axi2axi_lite_beat_size;
reg  signed [12:0] main_axi2wishbone0_axi2axi_lite_beat_offset = 13'd0;
wire [11:0] main_axi2wishbone0_axi2axi_lite_beat_wrap;
reg  main_axi2wishbone0_axi2axi_lite_cmd_done = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_last_ar_aw_n = 1'd0;
reg  [31:0] main_axi2wishbone0_axi_lite2wishbone_data = 32'd0;
wire [31:0] main_axi2wishbone0_axi_lite2wishbone_r_addr;
wire [31:0] main_axi2wishbone0_axi_lite2wishbone_w_addr;
reg  main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n = 1'd0;
reg  [29:0] main_interface1_adapted_interface_adr = 30'd0;
reg  [31:0] main_interface1_adapted_interface_dat_w = 32'd0;
wire [31:0] main_interface1_adapted_interface_dat_r;
reg  [3:0] main_interface1_adapted_interface_sel = 4'd0;
reg  main_interface1_adapted_interface_cyc = 1'd0;
reg  main_interface1_adapted_interface_stb = 1'd0;
wire main_interface1_adapted_interface_ack;
reg  main_interface1_adapted_interface_we = 1'd0;
reg  [2:0] main_interface1_adapted_interface_cti = 3'd0;
reg  [1:0] main_interface1_adapted_interface_bte = 2'd0;
wire main_interface1_adapted_interface_err;
reg  main_axi2wishbone1_aw_valid = 1'd0;
reg  main_axi2wishbone1_aw_ready = 1'd0;
reg  [31:0] main_axi2wishbone1_aw_payload_addr = 32'd0;
reg  main_axi2wishbone1_w_valid = 1'd0;
reg  main_axi2wishbone1_w_ready = 1'd0;
reg  [31:0] main_axi2wishbone1_w_payload_data = 32'd0;
reg  [3:0] main_axi2wishbone1_w_payload_strb = 4'd0;
reg  main_axi2wishbone1_b_valid = 1'd0;
wire main_axi2wishbone1_b_ready;
reg  [1:0] main_axi2wishbone1_b_payload_resp = 2'd0;
reg  main_axi2wishbone1_ar_valid = 1'd0;
reg  main_axi2wishbone1_ar_ready = 1'd0;
reg  [31:0] main_axi2wishbone1_ar_payload_addr = 32'd0;
reg  main_axi2wishbone1_r_valid = 1'd0;
reg  main_axi2wishbone1_r_ready = 1'd0;
reg  [1:0] main_axi2wishbone1_r_payload_resp = 2'd0;
reg  [31:0] main_axi2wishbone1_r_payload_data = 32'd0;
reg  main_axi2wishbone1_axi2axi_lite_ax_burst_valid = 1'd0;
wire main_axi2wishbone1_axi2axi_lite_ax_burst_ready;
reg  main_axi2wishbone1_axi2axi_lite_ax_burst_first = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_ax_burst_last = 1'd0;
reg  [31:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr = 32'd0;
reg  [1:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst = 2'd0;
reg  [7:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len = 8'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size = 4'd0;
reg  [1:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock = 2'd0;
reg  [2:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot = 3'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache = 4'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos = 4'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region = 4'd0;
reg  main_axi2wishbone1_axi2axi_lite_ax_burst_param_id = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_ax_burst_param_user = 1'd0;
wire main_axi2wishbone1_axi2axi_lite_ax_beat_valid;
reg  main_axi2wishbone1_axi2axi_lite_ax_beat_ready = 1'd0;
wire main_axi2wishbone1_axi2axi_lite_ax_beat_first;
wire main_axi2wishbone1_axi2axi_lite_ax_beat_last;
wire [31:0] main_axi2wishbone1_axi2axi_lite_ax_beat_payload_addr;
wire main_axi2wishbone1_axi2axi_lite_ax_beat_param_id;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_valid;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_ready;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_first;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_last;
wire [31:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_addr;
wire [1:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_burst;
wire [7:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_len;
wire [3:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_size;
wire [1:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_lock;
wire [2:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_prot;
wire [3:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_cache;
wire [3:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_qos;
wire [3:0] main_axi2wishbone1_axi2axi_lite_sink_sink_payload_region;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_param_id;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_param_dest;
wire main_axi2wishbone1_axi2axi_lite_sink_sink_param_user;
wire main_axi2wishbone1_axi2axi_lite_source_source_valid;
reg  main_axi2wishbone1_axi2axi_lite_source_source_ready = 1'd0;
wire main_axi2wishbone1_axi2axi_lite_source_source_first;
wire main_axi2wishbone1_axi2axi_lite_source_source_last;
wire [31:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_addr;
wire [1:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_burst;
wire [7:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_len;
wire [3:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_size;
wire [1:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_lock;
wire [2:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_prot;
wire [3:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_cache;
wire [3:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_qos;
wire [3:0] main_axi2wishbone1_axi2axi_lite_source_source_payload_region;
wire main_axi2wishbone1_axi2axi_lite_source_source_param_id;
wire main_axi2wishbone1_axi2axi_lite_source_source_param_dest;
wire main_axi2wishbone1_axi2axi_lite_source_source_param_user;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_valid;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_ready;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_first;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_last;
wire [31:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_addr;
wire [1:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_burst;
wire [7:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_len;
wire [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_size;
wire [1:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_lock;
wire [2:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_prot;
wire [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_cache;
wire [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_qos;
wire [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_region;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_id;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_dest;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_user;
reg  main_axi2wishbone1_axi2axi_lite_pipe_valid_source_valid = 1'd0;
wire main_axi2wishbone1_axi2axi_lite_pipe_valid_source_ready;
reg  main_axi2wishbone1_axi2axi_lite_pipe_valid_source_first = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_pipe_valid_source_last = 1'd0;
reg  [31:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_addr = 32'd0;
reg  [1:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_burst = 2'd0;
reg  [7:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_len = 8'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_size = 4'd0;
reg  [1:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_lock = 2'd0;
reg  [2:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_prot = 3'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_cache = 4'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_qos = 4'd0;
reg  [3:0] main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_region = 4'd0;
reg  main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_id = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_dest = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_user = 1'd0;
reg  [7:0] main_axi2wishbone1_axi2axi_lite_beat_count = 8'd0;
wire [11:0] main_axi2wishbone1_axi2axi_lite_beat_size;
reg  signed [12:0] main_axi2wishbone1_axi2axi_lite_beat_offset = 13'd0;
wire [11:0] main_axi2wishbone1_axi2axi_lite_beat_wrap;
reg  main_axi2wishbone1_axi2axi_lite_cmd_done = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_last_ar_aw_n = 1'd0;
reg  [31:0] main_axi2wishbone1_axi_lite2wishbone_data = 32'd0;
wire [31:0] main_axi2wishbone1_axi_lite2wishbone_r_addr;
wire [31:0] main_axi2wishbone1_axi_lite2wishbone_w_addr;
reg  main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n = 1'd0;
wire [29:0] main_simsoc_ram_bus_adr;
wire [31:0] main_simsoc_ram_bus_dat_w;
wire [31:0] main_simsoc_ram_bus_dat_r;
wire [3:0] main_simsoc_ram_bus_sel;
wire main_simsoc_ram_bus_cyc;
wire main_simsoc_ram_bus_stb;
reg  main_simsoc_ram_bus_ack = 1'd0;
wire main_simsoc_ram_bus_we;
wire [2:0] main_simsoc_ram_bus_cti;
wire [1:0] main_simsoc_ram_bus_bte;
reg  main_simsoc_ram_bus_err = 1'd0;
reg  main_simsoc_adr_burst = 1'd0;
wire [14:0] main_simsoc_adr;
wire [31:0] main_simsoc_dat_r;
wire [29:0] main_ram_bus_ram_bus_adr;
wire [31:0] main_ram_bus_ram_bus_dat_w;
wire [31:0] main_ram_bus_ram_bus_dat_r;
wire [3:0] main_ram_bus_ram_bus_sel;
wire main_ram_bus_ram_bus_cyc;
wire main_ram_bus_ram_bus_stb;
reg  main_ram_bus_ram_bus_ack = 1'd0;
wire main_ram_bus_ram_bus_we;
wire [2:0] main_ram_bus_ram_bus_cti;
wire [1:0] main_ram_bus_ram_bus_bte;
reg  main_ram_bus_ram_bus_err = 1'd0;
reg  main_ram_adr_burst = 1'd0;
wire [10:0] main_ram_adr;
wire [31:0] main_ram_dat_r;
reg  [3:0] main_ram_we = 4'd0;
wire [31:0] main_ram_dat_w;
wire main_sink_valid;
wire main_sink_ready;
wire main_sink_first;
wire main_sink_last;
wire [7:0] main_sink_payload_data;
wire main_source_valid;
wire main_source_ready;
reg  main_source_first = 1'd0;
reg  main_source_last = 1'd0;
wire [7:0] main_source_payload_data;
reg  main_uart_rxtx_re = 1'd0;
wire [7:0] main_uart_rxtx_r;
reg  main_uart_rxtx_we = 1'd0;
wire [7:0] main_uart_rxtx_w;
wire main_uart_txfull_status;
wire main_uart_txfull_we;
reg  main_uart_txfull_re = 1'd0;
wire main_uart_rxempty_status;
wire main_uart_rxempty_we;
reg  main_uart_rxempty_re = 1'd0;
wire main_uart_irq;
wire main_uart_tx_status;
reg  main_uart_tx_pending = 1'd0;
wire main_uart_tx_trigger;
reg  main_uart_tx_clear = 1'd0;
reg  main_uart_tx_trigger_d = 1'd0;
wire main_uart_rx_status;
reg  main_uart_rx_pending = 1'd0;
wire main_uart_rx_trigger;
reg  main_uart_rx_clear = 1'd0;
reg  main_uart_rx_trigger_d = 1'd0;
wire main_uart_tx0;
wire main_uart_rx0;
reg  [1:0] main_uart_status_status = 2'd0;
wire main_uart_status_we;
reg  main_uart_status_re = 1'd0;
wire main_uart_tx1;
wire main_uart_rx1;
reg  [1:0] main_uart_pending_status = 2'd0;
wire main_uart_pending_we;
reg  main_uart_pending_re = 1'd0;
reg  [1:0] main_uart_pending_r = 2'd0;
wire main_uart_tx2;
wire main_uart_rx2;
reg  [1:0] main_uart_enable_storage = 2'd0;
reg  main_uart_enable_re = 1'd0;
wire main_uart_txempty_status;
wire main_uart_txempty_we;
reg  main_uart_txempty_re = 1'd0;
wire main_uart_rxfull_status;
wire main_uart_rxfull_we;
reg  main_uart_rxfull_re = 1'd0;
wire main_uart_uart_sink_valid;
wire main_uart_uart_sink_ready;
wire main_uart_uart_sink_first;
wire main_uart_uart_sink_last;
wire [7:0] main_uart_uart_sink_payload_data;
wire main_uart_uart_source_valid;
wire main_uart_uart_source_ready;
wire main_uart_uart_source_first;
wire main_uart_uart_source_last;
wire [7:0] main_uart_uart_source_payload_data;
wire main_uart_tx_fifo_sink_valid;
wire main_uart_tx_fifo_sink_ready;
reg  main_uart_tx_fifo_sink_first = 1'd0;
reg  main_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] main_uart_tx_fifo_sink_payload_data;
wire main_uart_tx_fifo_source_valid;
wire main_uart_tx_fifo_source_ready;
wire main_uart_tx_fifo_source_first;
wire main_uart_tx_fifo_source_last;
wire [7:0] main_uart_tx_fifo_source_payload_data;
wire main_uart_tx_fifo_re;
reg  main_uart_tx_fifo_readable = 1'd0;
wire main_uart_tx_fifo_syncfifo_we;
wire main_uart_tx_fifo_syncfifo_writable;
wire main_uart_tx_fifo_syncfifo_re;
wire main_uart_tx_fifo_syncfifo_readable;
wire [9:0] main_uart_tx_fifo_syncfifo_din;
wire [9:0] main_uart_tx_fifo_syncfifo_dout;
reg  [4:0] main_uart_tx_fifo_level0 = 5'd0;
reg  main_uart_tx_fifo_replace = 1'd0;
reg  [3:0] main_uart_tx_fifo_produce = 4'd0;
reg  [3:0] main_uart_tx_fifo_consume = 4'd0;
reg  [3:0] main_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] main_uart_tx_fifo_wrport_dat_r;
wire main_uart_tx_fifo_wrport_we;
wire [9:0] main_uart_tx_fifo_wrport_dat_w;
wire main_uart_tx_fifo_do_read;
wire [3:0] main_uart_tx_fifo_rdport_adr;
wire [9:0] main_uart_tx_fifo_rdport_dat_r;
wire main_uart_tx_fifo_rdport_re;
wire [4:0] main_uart_tx_fifo_level1;
wire [7:0] main_uart_tx_fifo_fifo_in_payload_data;
wire main_uart_tx_fifo_fifo_in_first;
wire main_uart_tx_fifo_fifo_in_last;
wire [7:0] main_uart_tx_fifo_fifo_out_payload_data;
wire main_uart_tx_fifo_fifo_out_first;
wire main_uart_tx_fifo_fifo_out_last;
wire main_uart_rx_fifo_sink_valid;
wire main_uart_rx_fifo_sink_ready;
wire main_uart_rx_fifo_sink_first;
wire main_uart_rx_fifo_sink_last;
wire [7:0] main_uart_rx_fifo_sink_payload_data;
wire main_uart_rx_fifo_source_valid;
wire main_uart_rx_fifo_source_ready;
wire main_uart_rx_fifo_source_first;
wire main_uart_rx_fifo_source_last;
wire [7:0] main_uart_rx_fifo_source_payload_data;
wire main_uart_rx_fifo_re;
reg  main_uart_rx_fifo_readable = 1'd0;
wire main_uart_rx_fifo_syncfifo_we;
wire main_uart_rx_fifo_syncfifo_writable;
wire main_uart_rx_fifo_syncfifo_re;
wire main_uart_rx_fifo_syncfifo_readable;
wire [9:0] main_uart_rx_fifo_syncfifo_din;
wire [9:0] main_uart_rx_fifo_syncfifo_dout;
reg  [4:0] main_uart_rx_fifo_level0 = 5'd0;
reg  main_uart_rx_fifo_replace = 1'd0;
reg  [3:0] main_uart_rx_fifo_produce = 4'd0;
reg  [3:0] main_uart_rx_fifo_consume = 4'd0;
reg  [3:0] main_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] main_uart_rx_fifo_wrport_dat_r;
wire main_uart_rx_fifo_wrport_we;
wire [9:0] main_uart_rx_fifo_wrport_dat_w;
wire main_uart_rx_fifo_do_read;
wire [3:0] main_uart_rx_fifo_rdport_adr;
wire [9:0] main_uart_rx_fifo_rdport_dat_r;
wire main_uart_rx_fifo_rdport_re;
wire [4:0] main_uart_rx_fifo_level1;
wire [7:0] main_uart_rx_fifo_fifo_in_payload_data;
wire main_uart_rx_fifo_fifo_in_first;
wire main_uart_rx_fifo_fifo_in_last;
wire [7:0] main_uart_rx_fifo_fifo_out_payload_data;
wire main_uart_rx_fifo_fifo_out_first;
wire main_uart_rx_fifo_fifo_out_last;
reg  [31:0] main_timer_load_storage = 32'd0;
reg  main_timer_load_re = 1'd0;
reg  [31:0] main_timer_reload_storage = 32'd0;
reg  main_timer_reload_re = 1'd0;
reg  main_timer_en_storage = 1'd0;
reg  main_timer_en_re = 1'd0;
reg  main_timer_update_value_storage = 1'd0;
reg  main_timer_update_value_re = 1'd0;
reg  [31:0] main_timer_value_status = 32'd0;
wire main_timer_value_we;
reg  main_timer_value_re = 1'd0;
wire main_timer_irq;
wire main_timer_zero_status;
reg  main_timer_zero_pending = 1'd0;
wire main_timer_zero_trigger;
reg  main_timer_zero_clear = 1'd0;
reg  main_timer_zero_trigger_d = 1'd0;
wire main_timer_zero0;
wire main_timer_status_status;
wire main_timer_status_we;
reg  main_timer_status_re = 1'd0;
wire main_timer_zero1;
wire main_timer_pending_status;
wire main_timer_pending_we;
reg  main_timer_pending_re = 1'd0;
reg  main_timer_pending_r = 1'd0;
wire main_timer_zero2;
reg  main_timer_enable_storage = 1'd0;
reg  main_timer_enable_re = 1'd0;
reg  [31:0] main_timer_value = 32'd0;
reg  [13:0] builder_simsoc_adr = 14'd0;
reg  builder_simsoc_we = 1'd0;
reg  [31:0] builder_simsoc_dat_w = 32'd0;
wire [31:0] builder_simsoc_dat_r;
wire [29:0] builder_simsoc_wishbone_adr;
wire [31:0] builder_simsoc_wishbone_dat_w;
reg  [31:0] builder_simsoc_wishbone_dat_r = 32'd0;
wire [3:0] builder_simsoc_wishbone_sel;
wire builder_simsoc_wishbone_cyc;
wire builder_simsoc_wishbone_stb;
reg  builder_simsoc_wishbone_ack = 1'd0;
wire builder_simsoc_wishbone_we;
wire [2:0] builder_simsoc_wishbone_cti;
wire [1:0] builder_simsoc_wishbone_bte;
reg  builder_simsoc_wishbone_err = 1'd0;
wire [29:0] builder_shared_adr;
wire [31:0] builder_shared_dat_w;
reg  [31:0] builder_shared_dat_r = 32'd0;
wire [3:0] builder_shared_sel;
wire builder_shared_cyc;
wire builder_shared_stb;
reg  builder_shared_ack = 1'd0;
wire builder_shared_we;
wire [2:0] builder_shared_cti;
wire [1:0] builder_shared_bte;
wire builder_shared_err;
wire [1:0] builder_request;
reg  builder_grant = 1'd0;
reg  [2:0] builder_slave_sel = 3'd0;
reg  [2:0] builder_slave_sel_r = 3'd0;
reg  builder_error = 1'd0;
wire builder_wait;
wire builder_done;
reg  [19:0] builder_count = 20'd1000000;
wire [13:0] builder_csr_bankarray_interface0_bank_bus_adr;
wire builder_csr_bankarray_interface0_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface0_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface0_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank0_reset0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_r;
reg  builder_csr_bankarray_csrbank0_reset0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank0_reset0_w;
reg  builder_csr_bankarray_csrbank0_scratch0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_r;
reg  builder_csr_bankarray_csrbank0_scratch0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_scratch0_w;
reg  builder_csr_bankarray_csrbank0_bus_errors_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_r;
reg  builder_csr_bankarray_csrbank0_bus_errors_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank0_bus_errors_w;
wire builder_csr_bankarray_csrbank0_sel;
wire [13:0] builder_csr_bankarray_sram_bus_adr;
wire builder_csr_bankarray_sram_bus_we;
wire [31:0] builder_csr_bankarray_sram_bus_dat_w;
reg  [31:0] builder_csr_bankarray_sram_bus_dat_r = 32'd0;
wire [5:0] builder_csr_bankarray_adr;
wire [7:0] builder_csr_bankarray_dat_r;
wire builder_csr_bankarray_sel;
reg  builder_csr_bankarray_sel_r = 1'd0;
wire [13:0] builder_csr_bankarray_interface1_bank_bus_adr;
wire builder_csr_bankarray_interface1_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface1_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface1_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank1_load0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_load0_r;
reg  builder_csr_bankarray_csrbank1_load0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_load0_w;
reg  builder_csr_bankarray_csrbank1_reload0_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_reload0_r;
reg  builder_csr_bankarray_csrbank1_reload0_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_reload0_w;
reg  builder_csr_bankarray_csrbank1_en0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_en0_r;
reg  builder_csr_bankarray_csrbank1_en0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_en0_w;
reg  builder_csr_bankarray_csrbank1_update_value0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_update_value0_r;
reg  builder_csr_bankarray_csrbank1_update_value0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_update_value0_w;
reg  builder_csr_bankarray_csrbank1_value_re = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_value_r;
reg  builder_csr_bankarray_csrbank1_value_we = 1'd0;
wire [31:0] builder_csr_bankarray_csrbank1_value_w;
reg  builder_csr_bankarray_csrbank1_ev_status_re = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_status_r;
reg  builder_csr_bankarray_csrbank1_ev_status_we = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_status_w;
reg  builder_csr_bankarray_csrbank1_ev_pending_re = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_pending_r;
reg  builder_csr_bankarray_csrbank1_ev_pending_we = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_pending_w;
reg  builder_csr_bankarray_csrbank1_ev_enable0_re = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_enable0_r;
reg  builder_csr_bankarray_csrbank1_ev_enable0_we = 1'd0;
wire builder_csr_bankarray_csrbank1_ev_enable0_w;
wire builder_csr_bankarray_csrbank1_sel;
wire [13:0] builder_csr_bankarray_interface2_bank_bus_adr;
wire builder_csr_bankarray_interface2_bank_bus_we;
wire [31:0] builder_csr_bankarray_interface2_bank_bus_dat_w;
reg  [31:0] builder_csr_bankarray_interface2_bank_bus_dat_r = 32'd0;
reg  builder_csr_bankarray_csrbank2_txfull_re = 1'd0;
wire builder_csr_bankarray_csrbank2_txfull_r;
reg  builder_csr_bankarray_csrbank2_txfull_we = 1'd0;
wire builder_csr_bankarray_csrbank2_txfull_w;
reg  builder_csr_bankarray_csrbank2_rxempty_re = 1'd0;
wire builder_csr_bankarray_csrbank2_rxempty_r;
reg  builder_csr_bankarray_csrbank2_rxempty_we = 1'd0;
wire builder_csr_bankarray_csrbank2_rxempty_w;
reg  builder_csr_bankarray_csrbank2_ev_status_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_status_r;
reg  builder_csr_bankarray_csrbank2_ev_status_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_status_w;
reg  builder_csr_bankarray_csrbank2_ev_pending_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_pending_r;
reg  builder_csr_bankarray_csrbank2_ev_pending_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_pending_w;
reg  builder_csr_bankarray_csrbank2_ev_enable0_re = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_enable0_r;
reg  builder_csr_bankarray_csrbank2_ev_enable0_we = 1'd0;
wire [1:0] builder_csr_bankarray_csrbank2_ev_enable0_w;
reg  builder_csr_bankarray_csrbank2_txempty_re = 1'd0;
wire builder_csr_bankarray_csrbank2_txempty_r;
reg  builder_csr_bankarray_csrbank2_txempty_we = 1'd0;
wire builder_csr_bankarray_csrbank2_txempty_w;
reg  builder_csr_bankarray_csrbank2_rxfull_re = 1'd0;
wire builder_csr_bankarray_csrbank2_rxfull_r;
reg  builder_csr_bankarray_csrbank2_rxfull_we = 1'd0;
wire builder_csr_bankarray_csrbank2_rxfull_w;
wire builder_csr_bankarray_csrbank2_sel;
wire [13:0] builder_csr_interconnect_adr;
wire builder_csr_interconnect_we;
wire [31:0] builder_csr_interconnect_dat_w;
wire [31:0] builder_csr_interconnect_dat_r;
reg  [1:0] builder_simsoc_axi2axilite0_state = 2'd0;
reg  [1:0] builder_simsoc_axi2axilite0_next_state = 2'd0;
reg  main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value0 = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value_ce0 = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1 = 1'd0;
reg  main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1 = 1'd0;
reg  [2:0] builder_simsoc_axilite2wishbone0_state = 3'd0;
reg  [2:0] builder_simsoc_axilite2wishbone0_next_state = 3'd0;
reg  main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0 = 1'd0;
reg  main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0 = 1'd0;
reg  [31:0] main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value1 = 32'd0;
reg  main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value_ce1 = 1'd0;
reg  [1:0] builder_simsoc_axi2axilite1_state = 2'd0;
reg  [1:0] builder_simsoc_axi2axilite1_next_state = 2'd0;
reg  main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value0 = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value_ce0 = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1 = 1'd0;
reg  main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1 = 1'd0;
reg  [2:0] builder_simsoc_axilite2wishbone1_state = 3'd0;
reg  [2:0] builder_simsoc_axilite2wishbone1_next_state = 3'd0;
reg  main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0 = 1'd0;
reg  main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0 = 1'd0;
reg  [31:0] main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value1 = 32'd0;
reg  main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value_ce1 = 1'd0;
reg  builder_simsoc_state = 1'd0;
reg  builder_simsoc_next_state = 1'd0;
reg  [29:0] builder_array_muxed0 = 30'd0;
reg  [31:0] builder_array_muxed1 = 32'd0;
reg  [3:0] builder_array_muxed2 = 4'd0;
reg  builder_array_muxed3 = 1'd0;
reg  builder_array_muxed4 = 1'd0;
reg  builder_array_muxed5 = 1'd0;
reg  [2:0] builder_array_muxed6 = 3'd0;
reg  [1:0] builder_array_muxed7 = 2'd0;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign main_vexriscv_reset = (main_soc_rst | main_cpu_rst);
assign sim_trace = 1'd1;
assign main_bus_error = builder_error;
always @(*) begin
	main_vexriscv_interrupt <= 32'd0;
	main_vexriscv_interrupt[1] <= main_timer_irq;
	main_vexriscv_interrupt[0] <= main_uart_irq;
end
assign sys_clk_1 = sys_clk;
assign por_clk = sys_clk;
assign sys_rst = main_int_rst;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_valid = main_axi2wishbone0_axi2axi_lite_ax_burst_valid;
assign main_axi2wishbone0_axi2axi_lite_ax_burst_ready = main_axi2wishbone0_axi2axi_lite_sink_sink_ready;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_first = main_axi2wishbone0_axi2axi_lite_ax_burst_first;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_last = main_axi2wishbone0_axi2axi_lite_ax_burst_last;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_addr = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_burst = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_len = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_size = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_lock = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_prot = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_cache = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_qos = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_payload_region = main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_param_id = main_axi2wishbone0_axi2axi_lite_ax_burst_param_id;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_param_dest = main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_param_user = main_axi2wishbone0_axi2axi_lite_ax_burst_param_user;
assign main_axi2wishbone0_b_ready = 1'd1;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_ready = ((~main_axi2wishbone0_axi2axi_lite_pipe_valid_source_valid) | main_axi2wishbone0_axi2axi_lite_pipe_valid_source_ready);
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_valid = main_axi2wishbone0_axi2axi_lite_sink_sink_valid;
assign main_axi2wishbone0_axi2axi_lite_sink_sink_ready = main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_ready;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_first = main_axi2wishbone0_axi2axi_lite_sink_sink_first;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_last = main_axi2wishbone0_axi2axi_lite_sink_sink_last;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_addr = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_addr;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_burst = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_burst;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_len = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_len;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_size = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_size;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_lock = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_lock;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_prot = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_prot;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_cache = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_cache;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_qos = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_qos;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_region = main_axi2wishbone0_axi2axi_lite_sink_sink_payload_region;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_id = main_axi2wishbone0_axi2axi_lite_sink_sink_param_id;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_dest = main_axi2wishbone0_axi2axi_lite_sink_sink_param_dest;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_user = main_axi2wishbone0_axi2axi_lite_sink_sink_param_user;
assign main_axi2wishbone0_axi2axi_lite_source_source_valid = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_valid;
assign main_axi2wishbone0_axi2axi_lite_pipe_valid_source_ready = main_axi2wishbone0_axi2axi_lite_source_source_ready;
assign main_axi2wishbone0_axi2axi_lite_source_source_first = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_first;
assign main_axi2wishbone0_axi2axi_lite_source_source_last = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_last;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_addr = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_addr;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_burst = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_burst;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_len = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_len;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_size = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_size;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_lock = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_lock;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_prot = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_prot;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_cache = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_cache;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_qos = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_qos;
assign main_axi2wishbone0_axi2axi_lite_source_source_payload_region = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_region;
assign main_axi2wishbone0_axi2axi_lite_source_source_param_id = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_id;
assign main_axi2wishbone0_axi2axi_lite_source_source_param_dest = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_dest;
assign main_axi2wishbone0_axi2axi_lite_source_source_param_user = main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_user;
assign main_axi2wishbone0_axi2axi_lite_beat_size = (1'd1 <<< main_axi2wishbone0_axi2axi_lite_source_source_payload_size);
assign main_axi2wishbone0_axi2axi_lite_beat_wrap = (main_axi2wishbone0_axi2axi_lite_source_source_payload_len <<< main_axi2wishbone0_axi2axi_lite_source_source_payload_size);
assign main_axi2wishbone0_axi2axi_lite_ax_beat_valid = (main_axi2wishbone0_axi2axi_lite_source_source_valid | (~main_axi2wishbone0_axi2axi_lite_ax_beat_first));
assign main_axi2wishbone0_axi2axi_lite_ax_beat_first = (main_axi2wishbone0_axi2axi_lite_beat_count == 1'd0);
assign main_axi2wishbone0_axi2axi_lite_ax_beat_last = (main_axi2wishbone0_axi2axi_lite_beat_count == main_axi2wishbone0_axi2axi_lite_source_source_payload_len);
assign main_axi2wishbone0_axi2axi_lite_ax_beat_payload_addr = ($signed({1'd0, main_axi2wishbone0_axi2axi_lite_source_source_payload_addr}) + main_axi2wishbone0_axi2axi_lite_beat_offset);
assign main_axi2wishbone0_axi2axi_lite_ax_beat_param_id = main_axi2wishbone0_axi2axi_lite_source_source_param_id;
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_source_source_ready <= 1'd0;
	if (main_axi2wishbone0_axi2axi_lite_ax_beat_ready) begin
		if (main_axi2wishbone0_axi2axi_lite_ax_beat_last) begin
			main_axi2wishbone0_axi2axi_lite_source_source_ready <= 1'd1;
		end
	end
end
always @(*) begin
	builder_simsoc_axi2axilite0_next_state <= 2'd0;
	builder_simsoc_axi2axilite0_next_state <= builder_simsoc_axi2axilite0_state;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			if (((main_vexriscv_ibus_r_valid & main_vexriscv_ibus_r_last) & main_vexriscv_ibus_r_ready)) begin
				builder_simsoc_axi2axilite0_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (((main_vexriscv_ibus_w_valid & main_vexriscv_ibus_w_last) & main_vexriscv_ibus_w_ready)) begin
				builder_simsoc_axi2axilite0_next_state <= 2'd3;
			end
		end
		2'd3: begin
			if (main_vexriscv_ibus_b_ready) begin
				builder_simsoc_axi2axilite0_next_state <= 1'd0;
			end
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					builder_simsoc_axi2axilite0_next_state <= 2'd2;
				end else begin
					builder_simsoc_axi2axilite0_next_state <= 1'd1;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					builder_simsoc_axi2axilite0_next_state <= 1'd1;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						builder_simsoc_axi2axilite0_next_state <= 2'd2;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_ar_ready <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
				end else begin
					main_vexriscv_ibus_ar_ready <= main_axi2wishbone0_axi2axi_lite_ax_burst_ready;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_vexriscv_ibus_ar_ready <= main_axi2wishbone0_axi2axi_lite_ax_burst_ready;
				end else begin
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_valid <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_valid <= main_vexriscv_ibus_aw_valid;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_valid <= main_vexriscv_ibus_ar_valid;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_valid <= main_vexriscv_ibus_ar_valid;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_valid <= main_vexriscv_ibus_aw_valid;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_first <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_first <= main_vexriscv_ibus_aw_first;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_first <= main_vexriscv_ibus_ar_first;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_first <= main_vexriscv_ibus_ar_first;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_first <= main_vexriscv_ibus_aw_first;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_last <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_last <= main_vexriscv_ibus_aw_last;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_last <= main_vexriscv_ibus_ar_last;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_last <= main_vexriscv_ibus_ar_last;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_last <= main_vexriscv_ibus_aw_last;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr <= 32'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_ibus_aw_payload_addr;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_ibus_ar_payload_addr;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_ibus_ar_payload_addr;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_ibus_aw_payload_addr;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst <= 2'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_ibus_aw_payload_burst;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_ibus_ar_payload_burst;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_ibus_ar_payload_burst;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_ibus_aw_payload_burst;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len <= 8'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_ibus_aw_payload_len;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_ibus_ar_payload_len;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_ibus_ar_payload_len;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_ibus_aw_payload_len;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size <= 4'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_ibus_aw_payload_size;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_ibus_ar_payload_size;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_ibus_ar_payload_size;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_ibus_aw_payload_size;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock <= 2'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_ibus_aw_payload_lock;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_ibus_ar_payload_lock;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_ibus_ar_payload_lock;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_ibus_aw_payload_lock;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot <= 3'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_ibus_aw_payload_prot;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_ibus_ar_payload_prot;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_ibus_ar_payload_prot;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_ibus_aw_payload_prot;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache <= 4'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_ibus_aw_payload_cache;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_ibus_ar_payload_cache;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_ibus_ar_payload_cache;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_ibus_aw_payload_cache;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos <= 4'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_ibus_aw_payload_qos;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_ibus_ar_payload_qos;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_ibus_ar_payload_qos;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_ibus_aw_payload_qos;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_r_valid <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_vexriscv_ibus_r_valid <= main_axi2wishbone0_r_valid;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region <= 4'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_ibus_aw_payload_region;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_ibus_ar_payload_region;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_ibus_ar_payload_region;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_ibus_aw_payload_region;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_param_id <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_id <= main_vexriscv_ibus_aw_param_id;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_id <= main_vexriscv_ibus_ar_param_id;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_id <= main_vexriscv_ibus_ar_param_id;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_param_id <= main_vexriscv_ibus_aw_param_id;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_ibus_aw_param_dest;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_ibus_ar_param_dest;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_ibus_ar_param_dest;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_ibus_aw_param_dest;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_r_last <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_vexriscv_ibus_r_last <= main_axi2wishbone0_axi2axi_lite_cmd_done;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_burst_param_user <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_user <= main_vexriscv_ibus_aw_param_user;
				end else begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_user <= main_vexriscv_ibus_ar_param_user;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_ax_burst_param_user <= main_vexriscv_ibus_ar_param_user;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_ax_burst_param_user <= main_vexriscv_ibus_aw_param_user;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_r_payload_resp <= 2'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_vexriscv_ibus_r_payload_resp <= 1'd0;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_r_payload_data <= 32'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_vexriscv_ibus_r_payload_data <= main_axi2wishbone0_r_payload_data;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= (main_axi2wishbone0_ar_ready & (~main_axi2wishbone0_axi2axi_lite_cmd_done));
			if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone0_ar_ready) begin
					main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= 1'd0;
				end
			end
			if (((main_vexriscv_ibus_r_valid & main_vexriscv_ibus_r_last) & main_vexriscv_ibus_r_ready)) begin
				main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= 1'd1;
			end
		end
		2'd2: begin
			main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= (main_axi2wishbone0_aw_ready & (~main_axi2wishbone0_axi2axi_lite_cmd_done));
			if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone0_aw_ready) begin
					main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= 1'd0;
				end
			end
		end
		2'd3: begin
			if (main_vexriscv_ibus_b_ready) begin
				main_axi2wishbone0_axi2axi_lite_ax_beat_ready <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_r_param_id <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_vexriscv_ibus_r_param_id <= main_axi2wishbone0_axi2axi_lite_ax_beat_param_id;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value0 <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone0_ar_ready) begin
					main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone0_aw_ready) begin
					main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value0 <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
			main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value_ce0 <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone0_ar_ready) begin
					main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone0_aw_ready) begin
					main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
			main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
				end else begin
					main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd1;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1 <= 1'd0;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
				end else begin
					main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
					main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1 <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_aw_ready <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_ibus_ar_valid & main_vexriscv_ibus_aw_valid)) begin
				if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n) begin
					main_vexriscv_ibus_aw_ready <= main_axi2wishbone0_axi2axi_lite_ax_burst_ready;
				end else begin
				end
			end else begin
				if (main_vexriscv_ibus_ar_valid) begin
				end else begin
					if (main_vexriscv_ibus_aw_valid) begin
						main_vexriscv_ibus_aw_ready <= main_axi2wishbone0_axi2axi_lite_ax_burst_ready;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_aw_valid <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_aw_valid <= (main_axi2wishbone0_axi2axi_lite_ax_beat_valid & (~main_axi2wishbone0_axi2axi_lite_cmd_done));
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_aw_payload_addr <= 32'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_aw_payload_addr <= main_axi2wishbone0_axi2axi_lite_ax_beat_payload_addr;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_w_valid <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_w_valid <= main_vexriscv_ibus_w_valid;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_w_ready <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
			main_vexriscv_ibus_w_ready <= main_axi2wishbone0_w_ready;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_w_payload_data <= 32'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_w_payload_data <= main_vexriscv_ibus_w_payload_data;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_w_payload_strb <= 4'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_w_payload_strb <= main_vexriscv_ibus_w_payload_strb;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_b_valid <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_vexriscv_ibus_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_ar_valid <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_axi2wishbone0_ar_valid <= (main_axi2wishbone0_axi2axi_lite_ax_beat_valid & (~main_axi2wishbone0_axi2axi_lite_cmd_done));
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_b_payload_resp <= 2'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_vexriscv_ibus_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_ar_payload_addr <= 32'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_axi2wishbone0_ar_payload_addr <= main_axi2wishbone0_axi2axi_lite_ax_beat_payload_addr;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_ibus_b_param_id <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_vexriscv_ibus_b_param_id <= main_axi2wishbone0_axi2axi_lite_ax_beat_param_id;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_r_ready <= 1'd0;
	case (builder_simsoc_axi2axilite0_state)
		1'd1: begin
			main_axi2wishbone0_r_ready <= main_vexriscv_ibus_r_ready;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
assign main_axi2wishbone0_axi_lite2wishbone_r_addr = (main_axi2wishbone0_ar_payload_addr - 1'd0);
assign main_axi2wishbone0_axi_lite2wishbone_w_addr = (main_axi2wishbone0_aw_payload_addr - 1'd0);
always @(*) begin
	builder_simsoc_axilite2wishbone0_next_state <= 3'd0;
	builder_simsoc_axilite2wishbone0_next_state <= builder_simsoc_axilite2wishbone0_state;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			if (main_interface0_adapted_interface_ack) begin
				builder_simsoc_axilite2wishbone0_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (main_axi2wishbone0_r_ready) begin
				builder_simsoc_axilite2wishbone0_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (main_interface0_adapted_interface_ack) begin
				builder_simsoc_axilite2wishbone0_next_state <= 3'd4;
			end
		end
		3'd4: begin
			if (main_axi2wishbone0_b_ready) begin
				builder_simsoc_axilite2wishbone0_next_state <= 1'd0;
			end
		end
		default: begin
			if ((main_axi2wishbone0_ar_valid & main_axi2wishbone0_aw_valid)) begin
				if (main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n) begin
					builder_simsoc_axilite2wishbone0_next_state <= 2'd3;
				end else begin
					builder_simsoc_axilite2wishbone0_next_state <= 1'd1;
				end
			end else begin
				if (main_axi2wishbone0_ar_valid) begin
					builder_simsoc_axilite2wishbone0_next_state <= 1'd1;
				end else begin
					if (main_axi2wishbone0_aw_valid) begin
						builder_simsoc_axilite2wishbone0_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_r_payload_resp <= 2'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_r_payload_resp <= 1'd0;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_r_payload_data <= 32'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_r_payload_data <= main_axi2wishbone0_axi_lite2wishbone_data;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value_ce1 <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			if (main_interface0_adapted_interface_ack) begin
				main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface0_adapted_interface_adr <= 30'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			main_interface0_adapted_interface_adr <= main_axi2wishbone0_axi_lite2wishbone_r_addr[31:2];
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface0_adapted_interface_adr <= main_axi2wishbone0_axi_lite2wishbone_w_addr[31:2];
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface0_adapted_interface_dat_w <= 32'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface0_adapted_interface_dat_w <= main_axi2wishbone0_w_payload_data;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface0_adapted_interface_sel <= 4'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			main_interface0_adapted_interface_sel <= 4'd15;
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface0_adapted_interface_sel <= main_axi2wishbone0_w_payload_strb;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface0_adapted_interface_cyc <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			main_interface0_adapted_interface_cyc <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface0_adapted_interface_cyc <= main_axi2wishbone0_w_valid;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface0_adapted_interface_stb <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			main_interface0_adapted_interface_stb <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface0_adapted_interface_stb <= main_axi2wishbone0_w_valid;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface0_adapted_interface_we <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface0_adapted_interface_we <= 1'd1;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_aw_ready <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_interface0_adapted_interface_ack) begin
				main_axi2wishbone0_aw_ready <= 1'd1;
			end
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_w_ready <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_interface0_adapted_interface_ack) begin
				main_axi2wishbone0_w_ready <= 1'd1;
			end
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_b_valid <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_axi2wishbone0_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0 <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((main_axi2wishbone0_ar_valid & main_axi2wishbone0_aw_valid)) begin
				if (main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n) begin
					main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0 <= 1'd0;
				end else begin
					main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0 <= 1'd1;
				end
			end else begin
				if (main_axi2wishbone0_ar_valid) begin
					main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0 <= 1'd1;
				end else begin
					if (main_axi2wishbone0_aw_valid) begin
						main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0 <= 1'd0;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0 <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((main_axi2wishbone0_ar_valid & main_axi2wishbone0_aw_valid)) begin
				if (main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n) begin
					main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0 <= 1'd1;
				end else begin
					main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0 <= 1'd1;
				end
			end else begin
				if (main_axi2wishbone0_ar_valid) begin
					main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0 <= 1'd1;
				end else begin
					if (main_axi2wishbone0_aw_valid) begin
						main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0 <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_b_payload_resp <= 2'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_axi2wishbone0_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_ar_ready <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			if (main_interface0_adapted_interface_ack) begin
				main_axi2wishbone0_ar_ready <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value1 <= 32'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
			if (main_interface0_adapted_interface_ack) begin
				main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value1 <= main_interface0_adapted_interface_dat_r;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone0_r_valid <= 1'd0;
	case (builder_simsoc_axilite2wishbone0_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone0_r_valid <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
assign main_axi2wishbone1_axi2axi_lite_sink_sink_valid = main_axi2wishbone1_axi2axi_lite_ax_burst_valid;
assign main_axi2wishbone1_axi2axi_lite_ax_burst_ready = main_axi2wishbone1_axi2axi_lite_sink_sink_ready;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_first = main_axi2wishbone1_axi2axi_lite_ax_burst_first;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_last = main_axi2wishbone1_axi2axi_lite_ax_burst_last;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_addr = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_burst = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_len = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_size = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_lock = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_prot = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_cache = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_qos = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_payload_region = main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_param_id = main_axi2wishbone1_axi2axi_lite_ax_burst_param_id;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_param_dest = main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_param_user = main_axi2wishbone1_axi2axi_lite_ax_burst_param_user;
assign main_axi2wishbone1_b_ready = 1'd1;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_ready = ((~main_axi2wishbone1_axi2axi_lite_pipe_valid_source_valid) | main_axi2wishbone1_axi2axi_lite_pipe_valid_source_ready);
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_valid = main_axi2wishbone1_axi2axi_lite_sink_sink_valid;
assign main_axi2wishbone1_axi2axi_lite_sink_sink_ready = main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_ready;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_first = main_axi2wishbone1_axi2axi_lite_sink_sink_first;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_last = main_axi2wishbone1_axi2axi_lite_sink_sink_last;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_addr = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_addr;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_burst = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_burst;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_len = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_len;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_size = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_size;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_lock = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_lock;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_prot = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_prot;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_cache = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_cache;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_qos = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_qos;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_region = main_axi2wishbone1_axi2axi_lite_sink_sink_payload_region;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_id = main_axi2wishbone1_axi2axi_lite_sink_sink_param_id;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_dest = main_axi2wishbone1_axi2axi_lite_sink_sink_param_dest;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_user = main_axi2wishbone1_axi2axi_lite_sink_sink_param_user;
assign main_axi2wishbone1_axi2axi_lite_source_source_valid = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_valid;
assign main_axi2wishbone1_axi2axi_lite_pipe_valid_source_ready = main_axi2wishbone1_axi2axi_lite_source_source_ready;
assign main_axi2wishbone1_axi2axi_lite_source_source_first = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_first;
assign main_axi2wishbone1_axi2axi_lite_source_source_last = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_last;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_addr = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_addr;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_burst = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_burst;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_len = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_len;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_size = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_size;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_lock = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_lock;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_prot = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_prot;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_cache = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_cache;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_qos = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_qos;
assign main_axi2wishbone1_axi2axi_lite_source_source_payload_region = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_region;
assign main_axi2wishbone1_axi2axi_lite_source_source_param_id = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_id;
assign main_axi2wishbone1_axi2axi_lite_source_source_param_dest = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_dest;
assign main_axi2wishbone1_axi2axi_lite_source_source_param_user = main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_user;
assign main_axi2wishbone1_axi2axi_lite_beat_size = (1'd1 <<< main_axi2wishbone1_axi2axi_lite_source_source_payload_size);
assign main_axi2wishbone1_axi2axi_lite_beat_wrap = (main_axi2wishbone1_axi2axi_lite_source_source_payload_len <<< main_axi2wishbone1_axi2axi_lite_source_source_payload_size);
assign main_axi2wishbone1_axi2axi_lite_ax_beat_valid = (main_axi2wishbone1_axi2axi_lite_source_source_valid | (~main_axi2wishbone1_axi2axi_lite_ax_beat_first));
assign main_axi2wishbone1_axi2axi_lite_ax_beat_first = (main_axi2wishbone1_axi2axi_lite_beat_count == 1'd0);
assign main_axi2wishbone1_axi2axi_lite_ax_beat_last = (main_axi2wishbone1_axi2axi_lite_beat_count == main_axi2wishbone1_axi2axi_lite_source_source_payload_len);
assign main_axi2wishbone1_axi2axi_lite_ax_beat_payload_addr = ($signed({1'd0, main_axi2wishbone1_axi2axi_lite_source_source_payload_addr}) + main_axi2wishbone1_axi2axi_lite_beat_offset);
assign main_axi2wishbone1_axi2axi_lite_ax_beat_param_id = main_axi2wishbone1_axi2axi_lite_source_source_param_id;
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_source_source_ready <= 1'd0;
	if (main_axi2wishbone1_axi2axi_lite_ax_beat_ready) begin
		if (main_axi2wishbone1_axi2axi_lite_ax_beat_last) begin
			main_axi2wishbone1_axi2axi_lite_source_source_ready <= 1'd1;
		end
	end
end
always @(*) begin
	builder_simsoc_axi2axilite1_next_state <= 2'd0;
	builder_simsoc_axi2axilite1_next_state <= builder_simsoc_axi2axilite1_state;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			if (((main_vexriscv_dbus_r_valid & main_vexriscv_dbus_r_last) & main_vexriscv_dbus_r_ready)) begin
				builder_simsoc_axi2axilite1_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (((main_vexriscv_dbus_w_valid & main_vexriscv_dbus_w_last) & main_vexriscv_dbus_w_ready)) begin
				builder_simsoc_axi2axilite1_next_state <= 2'd3;
			end
		end
		2'd3: begin
			if (main_vexriscv_dbus_b_ready) begin
				builder_simsoc_axi2axilite1_next_state <= 1'd0;
			end
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					builder_simsoc_axi2axilite1_next_state <= 2'd2;
				end else begin
					builder_simsoc_axi2axilite1_next_state <= 1'd1;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					builder_simsoc_axi2axilite1_next_state <= 1'd1;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						builder_simsoc_axi2axilite1_next_state <= 2'd2;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_last <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_last <= main_vexriscv_dbus_aw_last;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_last <= main_vexriscv_dbus_ar_last;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_last <= main_vexriscv_dbus_ar_last;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_last <= main_vexriscv_dbus_aw_last;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr <= 32'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_dbus_aw_payload_addr;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_dbus_ar_payload_addr;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_dbus_ar_payload_addr;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_addr <= main_vexriscv_dbus_aw_payload_addr;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst <= 2'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_dbus_aw_payload_burst;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_dbus_ar_payload_burst;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_dbus_ar_payload_burst;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_burst <= main_vexriscv_dbus_aw_payload_burst;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len <= 8'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_dbus_aw_payload_len;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_dbus_ar_payload_len;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_dbus_ar_payload_len;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_len <= main_vexriscv_dbus_aw_payload_len;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size <= 4'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_dbus_aw_payload_size;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_dbus_ar_payload_size;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_dbus_ar_payload_size;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_size <= main_vexriscv_dbus_aw_payload_size;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock <= 2'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_dbus_aw_payload_lock;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_dbus_ar_payload_lock;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_dbus_ar_payload_lock;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_lock <= main_vexriscv_dbus_aw_payload_lock;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot <= 3'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_dbus_aw_payload_prot;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_dbus_ar_payload_prot;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_dbus_ar_payload_prot;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_prot <= main_vexriscv_dbus_aw_payload_prot;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache <= 4'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_dbus_aw_payload_cache;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_dbus_ar_payload_cache;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_dbus_ar_payload_cache;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_cache <= main_vexriscv_dbus_aw_payload_cache;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value0 <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone1_ar_ready) begin
					main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone1_aw_ready) begin
					main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value0 <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
			main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value0 <= 1'd0;
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos <= 4'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_dbus_aw_payload_qos;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_dbus_ar_payload_qos;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_dbus_ar_payload_qos;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_qos <= main_vexriscv_dbus_aw_payload_qos;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value_ce0 <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone1_ar_ready) begin
					main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd2: begin
			if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone1_aw_ready) begin
					main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
				end
			end
		end
		2'd3: begin
		end
		default: begin
			main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value_ce0 <= 1'd1;
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region <= 4'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_dbus_aw_payload_region;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_dbus_ar_payload_region;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_dbus_ar_payload_region;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_payload_region <= main_vexriscv_dbus_aw_payload_region;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_r_valid <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_vexriscv_dbus_r_valid <= main_axi2wishbone1_r_valid;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_param_id <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_id <= main_vexriscv_dbus_aw_param_id;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_id <= main_vexriscv_dbus_ar_param_id;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_id <= main_vexriscv_dbus_ar_param_id;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_param_id <= main_vexriscv_dbus_aw_param_id;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_dbus_aw_param_dest;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_dbus_ar_param_dest;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_dbus_ar_param_dest;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_param_dest <= main_vexriscv_dbus_aw_param_dest;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
				end else begin
					main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd1;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1 <= 1'd0;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_param_user <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_user <= main_vexriscv_dbus_aw_param_user;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_user <= main_vexriscv_dbus_ar_param_user;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_param_user <= main_vexriscv_dbus_ar_param_user;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_param_user <= main_vexriscv_dbus_aw_param_user;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
				end else begin
					main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1 <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_r_last <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_vexriscv_dbus_r_last <= main_axi2wishbone1_axi2axi_lite_cmd_done;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_r_payload_resp <= 2'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_vexriscv_dbus_r_payload_resp <= 1'd0;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= (main_axi2wishbone1_ar_ready & (~main_axi2wishbone1_axi2axi_lite_cmd_done));
			if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone1_ar_ready) begin
					main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= 1'd0;
				end
			end
			if (((main_vexriscv_dbus_r_valid & main_vexriscv_dbus_r_last) & main_vexriscv_dbus_r_ready)) begin
				main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= 1'd1;
			end
		end
		2'd2: begin
			main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= (main_axi2wishbone1_aw_ready & (~main_axi2wishbone1_axi2axi_lite_cmd_done));
			if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_last)) begin
				if (main_axi2wishbone1_aw_ready) begin
					main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= 1'd0;
				end
			end
		end
		2'd3: begin
			if (main_vexriscv_dbus_b_ready) begin
				main_axi2wishbone1_axi2axi_lite_ax_beat_ready <= 1'd1;
			end
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_r_payload_data <= 32'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_vexriscv_dbus_r_payload_data <= main_axi2wishbone1_r_payload_data;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_r_param_id <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_vexriscv_dbus_r_param_id <= main_axi2wishbone1_axi2axi_lite_ax_beat_param_id;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_aw_ready <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_vexriscv_dbus_aw_ready <= main_axi2wishbone1_axi2axi_lite_ax_burst_ready;
				end else begin
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_vexriscv_dbus_aw_ready <= main_axi2wishbone1_axi2axi_lite_ax_burst_ready;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_aw_valid <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_aw_valid <= (main_axi2wishbone1_axi2axi_lite_ax_beat_valid & (~main_axi2wishbone1_axi2axi_lite_cmd_done));
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_aw_payload_addr <= 32'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_aw_payload_addr <= main_axi2wishbone1_axi2axi_lite_ax_beat_payload_addr;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_w_valid <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_w_valid <= main_vexriscv_dbus_w_valid;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_w_ready <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
			main_vexriscv_dbus_w_ready <= main_axi2wishbone1_w_ready;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_w_payload_data <= 32'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_w_payload_data <= main_vexriscv_dbus_w_payload_data;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_w_payload_strb <= 4'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_w_payload_strb <= main_vexriscv_dbus_w_payload_strb;
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_ar_valid <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_axi2wishbone1_ar_valid <= (main_axi2wishbone1_axi2axi_lite_ax_beat_valid & (~main_axi2wishbone1_axi2axi_lite_cmd_done));
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_b_valid <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_vexriscv_dbus_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_ar_payload_addr <= 32'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_axi2wishbone1_ar_payload_addr <= main_axi2wishbone1_axi2axi_lite_ax_beat_payload_addr;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_b_payload_resp <= 2'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_vexriscv_dbus_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_b_param_id <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_vexriscv_dbus_b_param_id <= main_axi2wishbone1_axi2axi_lite_ax_beat_param_id;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_r_ready <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
			main_axi2wishbone1_r_ready <= main_vexriscv_dbus_r_ready;
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_vexriscv_dbus_ar_ready <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
				end else begin
					main_vexriscv_dbus_ar_ready <= main_axi2wishbone1_axi2axi_lite_ax_burst_ready;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_vexriscv_dbus_ar_ready <= main_axi2wishbone1_axi2axi_lite_ax_burst_ready;
				end else begin
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_valid <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_valid <= main_vexriscv_dbus_aw_valid;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_valid <= main_vexriscv_dbus_ar_valid;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_valid <= main_vexriscv_dbus_ar_valid;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_valid <= main_vexriscv_dbus_aw_valid;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi2axi_lite_ax_burst_first <= 1'd0;
	case (builder_simsoc_axi2axilite1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		default: begin
			if ((main_vexriscv_dbus_ar_valid & main_vexriscv_dbus_aw_valid)) begin
				if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_first <= main_vexriscv_dbus_aw_first;
				end else begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_first <= main_vexriscv_dbus_ar_first;
				end
			end else begin
				if (main_vexriscv_dbus_ar_valid) begin
					main_axi2wishbone1_axi2axi_lite_ax_burst_first <= main_vexriscv_dbus_ar_first;
				end else begin
					if (main_vexriscv_dbus_aw_valid) begin
						main_axi2wishbone1_axi2axi_lite_ax_burst_first <= main_vexriscv_dbus_aw_first;
					end
				end
			end
		end
	endcase
end
assign main_axi2wishbone1_axi_lite2wishbone_r_addr = (main_axi2wishbone1_ar_payload_addr - 1'd0);
assign main_axi2wishbone1_axi_lite2wishbone_w_addr = (main_axi2wishbone1_aw_payload_addr - 1'd0);
always @(*) begin
	builder_simsoc_axilite2wishbone1_next_state <= 3'd0;
	builder_simsoc_axilite2wishbone1_next_state <= builder_simsoc_axilite2wishbone1_state;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			if (main_interface1_adapted_interface_ack) begin
				builder_simsoc_axilite2wishbone1_next_state <= 2'd2;
			end
		end
		2'd2: begin
			if (main_axi2wishbone1_r_ready) begin
				builder_simsoc_axilite2wishbone1_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (main_interface1_adapted_interface_ack) begin
				builder_simsoc_axilite2wishbone1_next_state <= 3'd4;
			end
		end
		3'd4: begin
			if (main_axi2wishbone1_b_ready) begin
				builder_simsoc_axilite2wishbone1_next_state <= 1'd0;
			end
		end
		default: begin
			if ((main_axi2wishbone1_ar_valid & main_axi2wishbone1_aw_valid)) begin
				if (main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n) begin
					builder_simsoc_axilite2wishbone1_next_state <= 2'd3;
				end else begin
					builder_simsoc_axilite2wishbone1_next_state <= 1'd1;
				end
			end else begin
				if (main_axi2wishbone1_ar_valid) begin
					builder_simsoc_axilite2wishbone1_next_state <= 1'd1;
				end else begin
					if (main_axi2wishbone1_aw_valid) begin
						builder_simsoc_axilite2wishbone1_next_state <= 2'd3;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_interface1_adapted_interface_adr <= 30'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			main_interface1_adapted_interface_adr <= main_axi2wishbone1_axi_lite2wishbone_r_addr[31:2];
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface1_adapted_interface_adr <= main_axi2wishbone1_axi_lite2wishbone_w_addr[31:2];
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface1_adapted_interface_dat_w <= 32'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface1_adapted_interface_dat_w <= main_axi2wishbone1_w_payload_data;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface1_adapted_interface_sel <= 4'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			main_interface1_adapted_interface_sel <= 4'd15;
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface1_adapted_interface_sel <= main_axi2wishbone1_w_payload_strb;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface1_adapted_interface_cyc <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			main_interface1_adapted_interface_cyc <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface1_adapted_interface_cyc <= main_axi2wishbone1_w_valid;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface1_adapted_interface_stb <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			main_interface1_adapted_interface_stb <= 1'd1;
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface1_adapted_interface_stb <= main_axi2wishbone1_w_valid;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_interface1_adapted_interface_we <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			main_interface1_adapted_interface_we <= 1'd1;
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_aw_ready <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_interface1_adapted_interface_ack) begin
				main_axi2wishbone1_aw_ready <= 1'd1;
			end
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0 <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((main_axi2wishbone1_ar_valid & main_axi2wishbone1_aw_valid)) begin
				if (main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n) begin
					main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0 <= 1'd0;
				end else begin
					main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0 <= 1'd1;
				end
			end else begin
				if (main_axi2wishbone1_ar_valid) begin
					main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0 <= 1'd1;
				end else begin
					if (main_axi2wishbone1_aw_valid) begin
						main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0 <= 1'd0;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0 <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
			if ((main_axi2wishbone1_ar_valid & main_axi2wishbone1_aw_valid)) begin
				if (main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n) begin
					main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0 <= 1'd1;
				end else begin
					main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0 <= 1'd1;
				end
			end else begin
				if (main_axi2wishbone1_ar_valid) begin
					main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0 <= 1'd1;
				end else begin
					if (main_axi2wishbone1_aw_valid) begin
						main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0 <= 1'd1;
					end
				end
			end
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_w_ready <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
			if (main_interface1_adapted_interface_ack) begin
				main_axi2wishbone1_w_ready <= 1'd1;
			end
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_b_valid <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_axi2wishbone1_b_valid <= 1'd1;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value1 <= 32'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			if (main_interface1_adapted_interface_ack) begin
				main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value1 <= main_interface1_adapted_interface_dat_r;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value_ce1 <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			if (main_interface1_adapted_interface_ack) begin
				main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_b_payload_resp <= 2'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
			main_axi2wishbone1_b_payload_resp <= 1'd0;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_ar_ready <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
			if (main_interface1_adapted_interface_ack) begin
				main_axi2wishbone1_ar_ready <= 1'd1;
			end
		end
		2'd2: begin
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_r_valid <= 1'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_r_valid <= 1'd1;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_r_payload_resp <= 2'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_r_payload_resp <= 1'd0;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
always @(*) begin
	main_axi2wishbone1_r_payload_data <= 32'd0;
	case (builder_simsoc_axilite2wishbone1_state)
		1'd1: begin
		end
		2'd2: begin
			main_axi2wishbone1_r_payload_data <= main_axi2wishbone1_axi_lite2wishbone_data;
		end
		2'd3: begin
		end
		3'd4: begin
		end
		default: begin
		end
	endcase
end
assign main_bus_errors_status = main_bus_errors;
assign main_simsoc_adr = main_simsoc_ram_bus_adr[14:0];
assign main_simsoc_ram_bus_dat_r = main_simsoc_dat_r;
always @(*) begin
	main_ram_we <= 4'd0;
	main_ram_we[0] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[0]);
	main_ram_we[1] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[1]);
	main_ram_we[2] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[2]);
	main_ram_we[3] <= (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & main_ram_bus_ram_bus_we) & main_ram_bus_ram_bus_sel[3]);
end
assign main_ram_adr = main_ram_bus_ram_bus_adr[10:0];
assign main_ram_bus_ram_bus_dat_r = main_ram_dat_r;
assign main_ram_dat_w = main_ram_bus_ram_bus_dat_w;
assign serial_source_valid = main_sink_valid;
assign serial_source_data = main_sink_payload_data;
assign main_sink_ready = serial_source_ready;
assign main_source_valid = serial_sink_valid;
assign main_source_payload_data = serial_sink_data;
assign serial_sink_ready = main_source_ready;
assign main_uart_uart_sink_valid = main_source_valid;
assign main_source_ready = main_uart_uart_sink_ready;
assign main_uart_uart_sink_first = main_source_first;
assign main_uart_uart_sink_last = main_source_last;
assign main_uart_uart_sink_payload_data = main_source_payload_data;
assign main_sink_valid = main_uart_uart_source_valid;
assign main_uart_uart_source_ready = main_sink_ready;
assign main_sink_first = main_uart_uart_source_first;
assign main_sink_last = main_uart_uart_source_last;
assign main_sink_payload_data = main_uart_uart_source_payload_data;
assign main_uart_tx_fifo_sink_valid = main_uart_rxtx_re;
assign main_uart_tx_fifo_sink_payload_data = main_uart_rxtx_r;
assign main_uart_uart_source_valid = main_uart_tx_fifo_source_valid;
assign main_uart_tx_fifo_source_ready = main_uart_uart_source_ready;
assign main_uart_uart_source_first = main_uart_tx_fifo_source_first;
assign main_uart_uart_source_last = main_uart_tx_fifo_source_last;
assign main_uart_uart_source_payload_data = main_uart_tx_fifo_source_payload_data;
assign main_uart_txfull_status = (~main_uart_tx_fifo_sink_ready);
assign main_uart_txempty_status = (~main_uart_tx_fifo_source_valid);
assign main_uart_tx_trigger = main_uart_tx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_valid = main_uart_uart_sink_valid;
assign main_uart_uart_sink_ready = main_uart_rx_fifo_sink_ready;
assign main_uart_rx_fifo_sink_first = main_uart_uart_sink_first;
assign main_uart_rx_fifo_sink_last = main_uart_uart_sink_last;
assign main_uart_rx_fifo_sink_payload_data = main_uart_uart_sink_payload_data;
assign main_uart_rxtx_w = main_uart_rx_fifo_source_payload_data;
assign main_uart_rx_fifo_source_ready = (main_uart_rx_clear | (1'd0 & main_uart_rxtx_we));
assign main_uart_rxempty_status = (~main_uart_rx_fifo_source_valid);
assign main_uart_rxfull_status = (~main_uart_rx_fifo_sink_ready);
assign main_uart_rx_trigger = main_uart_rx_fifo_source_valid;
assign main_uart_tx0 = main_uart_tx_status;
assign main_uart_tx1 = main_uart_tx_pending;
always @(*) begin
	main_uart_tx_clear <= 1'd0;
	if ((main_uart_pending_re & main_uart_pending_r[0])) begin
		main_uart_tx_clear <= 1'd1;
	end
end
assign main_uart_rx0 = main_uart_rx_status;
assign main_uart_rx1 = main_uart_rx_pending;
always @(*) begin
	main_uart_rx_clear <= 1'd0;
	if ((main_uart_pending_re & main_uart_pending_r[1])) begin
		main_uart_rx_clear <= 1'd1;
	end
end
assign main_uart_irq = ((main_uart_pending_status[0] & main_uart_enable_storage[0]) | (main_uart_pending_status[1] & main_uart_enable_storage[1]));
assign main_uart_tx_status = main_uart_tx_trigger;
assign main_uart_rx_status = main_uart_rx_trigger;
assign main_uart_tx_fifo_syncfifo_din = {main_uart_tx_fifo_fifo_in_last, main_uart_tx_fifo_fifo_in_first, main_uart_tx_fifo_fifo_in_payload_data};
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign {main_uart_tx_fifo_fifo_out_last, main_uart_tx_fifo_fifo_out_first, main_uart_tx_fifo_fifo_out_payload_data} = main_uart_tx_fifo_syncfifo_dout;
assign main_uart_tx_fifo_sink_ready = main_uart_tx_fifo_syncfifo_writable;
assign main_uart_tx_fifo_syncfifo_we = main_uart_tx_fifo_sink_valid;
assign main_uart_tx_fifo_fifo_in_first = main_uart_tx_fifo_sink_first;
assign main_uart_tx_fifo_fifo_in_last = main_uart_tx_fifo_sink_last;
assign main_uart_tx_fifo_fifo_in_payload_data = main_uart_tx_fifo_sink_payload_data;
assign main_uart_tx_fifo_source_valid = main_uart_tx_fifo_readable;
assign main_uart_tx_fifo_source_first = main_uart_tx_fifo_fifo_out_first;
assign main_uart_tx_fifo_source_last = main_uart_tx_fifo_fifo_out_last;
assign main_uart_tx_fifo_source_payload_data = main_uart_tx_fifo_fifo_out_payload_data;
assign main_uart_tx_fifo_re = main_uart_tx_fifo_source_ready;
assign main_uart_tx_fifo_syncfifo_re = (main_uart_tx_fifo_syncfifo_readable & ((~main_uart_tx_fifo_readable) | main_uart_tx_fifo_re));
assign main_uart_tx_fifo_level1 = (main_uart_tx_fifo_level0 + main_uart_tx_fifo_readable);
always @(*) begin
	main_uart_tx_fifo_wrport_adr <= 4'd0;
	if (main_uart_tx_fifo_replace) begin
		main_uart_tx_fifo_wrport_adr <= (main_uart_tx_fifo_produce - 1'd1);
	end else begin
		main_uart_tx_fifo_wrport_adr <= main_uart_tx_fifo_produce;
	end
end
assign main_uart_tx_fifo_wrport_dat_w = main_uart_tx_fifo_syncfifo_din;
assign main_uart_tx_fifo_wrport_we = (main_uart_tx_fifo_syncfifo_we & (main_uart_tx_fifo_syncfifo_writable | main_uart_tx_fifo_replace));
assign main_uart_tx_fifo_do_read = (main_uart_tx_fifo_syncfifo_readable & main_uart_tx_fifo_syncfifo_re);
assign main_uart_tx_fifo_rdport_adr = main_uart_tx_fifo_consume;
assign main_uart_tx_fifo_syncfifo_dout = main_uart_tx_fifo_rdport_dat_r;
assign main_uart_tx_fifo_rdport_re = main_uart_tx_fifo_do_read;
assign main_uart_tx_fifo_syncfifo_writable = (main_uart_tx_fifo_level0 != 5'd16);
assign main_uart_tx_fifo_syncfifo_readable = (main_uart_tx_fifo_level0 != 1'd0);
assign main_uart_rx_fifo_syncfifo_din = {main_uart_rx_fifo_fifo_in_last, main_uart_rx_fifo_fifo_in_first, main_uart_rx_fifo_fifo_in_payload_data};
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign {main_uart_rx_fifo_fifo_out_last, main_uart_rx_fifo_fifo_out_first, main_uart_rx_fifo_fifo_out_payload_data} = main_uart_rx_fifo_syncfifo_dout;
assign main_uart_rx_fifo_sink_ready = main_uart_rx_fifo_syncfifo_writable;
assign main_uart_rx_fifo_syncfifo_we = main_uart_rx_fifo_sink_valid;
assign main_uart_rx_fifo_fifo_in_first = main_uart_rx_fifo_sink_first;
assign main_uart_rx_fifo_fifo_in_last = main_uart_rx_fifo_sink_last;
assign main_uart_rx_fifo_fifo_in_payload_data = main_uart_rx_fifo_sink_payload_data;
assign main_uart_rx_fifo_source_valid = main_uart_rx_fifo_readable;
assign main_uart_rx_fifo_source_first = main_uart_rx_fifo_fifo_out_first;
assign main_uart_rx_fifo_source_last = main_uart_rx_fifo_fifo_out_last;
assign main_uart_rx_fifo_source_payload_data = main_uart_rx_fifo_fifo_out_payload_data;
assign main_uart_rx_fifo_re = main_uart_rx_fifo_source_ready;
assign main_uart_rx_fifo_syncfifo_re = (main_uart_rx_fifo_syncfifo_readable & ((~main_uart_rx_fifo_readable) | main_uart_rx_fifo_re));
assign main_uart_rx_fifo_level1 = (main_uart_rx_fifo_level0 + main_uart_rx_fifo_readable);
always @(*) begin
	main_uart_rx_fifo_wrport_adr <= 4'd0;
	if (main_uart_rx_fifo_replace) begin
		main_uart_rx_fifo_wrport_adr <= (main_uart_rx_fifo_produce - 1'd1);
	end else begin
		main_uart_rx_fifo_wrport_adr <= main_uart_rx_fifo_produce;
	end
end
assign main_uart_rx_fifo_wrport_dat_w = main_uart_rx_fifo_syncfifo_din;
assign main_uart_rx_fifo_wrport_we = (main_uart_rx_fifo_syncfifo_we & (main_uart_rx_fifo_syncfifo_writable | main_uart_rx_fifo_replace));
assign main_uart_rx_fifo_do_read = (main_uart_rx_fifo_syncfifo_readable & main_uart_rx_fifo_syncfifo_re);
assign main_uart_rx_fifo_rdport_adr = main_uart_rx_fifo_consume;
assign main_uart_rx_fifo_syncfifo_dout = main_uart_rx_fifo_rdport_dat_r;
assign main_uart_rx_fifo_rdport_re = main_uart_rx_fifo_do_read;
assign main_uart_rx_fifo_syncfifo_writable = (main_uart_rx_fifo_level0 != 5'd16);
assign main_uart_rx_fifo_syncfifo_readable = (main_uart_rx_fifo_level0 != 1'd0);
assign main_timer_zero_trigger = (main_timer_value == 1'd0);
assign main_timer_zero0 = main_timer_zero_status;
assign main_timer_zero1 = main_timer_zero_pending;
always @(*) begin
	main_timer_zero_clear <= 1'd0;
	if ((main_timer_pending_re & main_timer_pending_r)) begin
		main_timer_zero_clear <= 1'd1;
	end
end
assign main_timer_irq = (main_timer_pending_status & main_timer_enable_storage);
assign main_timer_zero_status = main_timer_zero_trigger;
always @(*) begin
	builder_simsoc_next_state <= 1'd0;
	builder_simsoc_next_state <= builder_simsoc_state;
	case (builder_simsoc_state)
		1'd1: begin
			builder_simsoc_next_state <= 1'd0;
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_adr <= 14'd0;
	case (builder_simsoc_state)
		1'd1: begin
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_adr <= builder_simsoc_wishbone_adr;
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_we <= 1'd0;
	case (builder_simsoc_state)
		1'd1: begin
		end
		default: begin
			if ((builder_simsoc_wishbone_cyc & builder_simsoc_wishbone_stb)) begin
				builder_simsoc_we <= (builder_simsoc_wishbone_we & (builder_simsoc_wishbone_sel != 1'd0));
			end
		end
	endcase
end
always @(*) begin
	builder_simsoc_dat_w <= 32'd0;
	case (builder_simsoc_state)
		1'd1: begin
		end
		default: begin
			builder_simsoc_dat_w <= builder_simsoc_wishbone_dat_w;
		end
	endcase
end
always @(*) begin
	builder_simsoc_wishbone_dat_r <= 32'd0;
	case (builder_simsoc_state)
		1'd1: begin
			builder_simsoc_wishbone_dat_r <= builder_simsoc_dat_r;
		end
		default: begin
		end
	endcase
end
always @(*) begin
	builder_simsoc_wishbone_ack <= 1'd0;
	case (builder_simsoc_state)
		1'd1: begin
			builder_simsoc_wishbone_ack <= 1'd1;
		end
		default: begin
		end
	endcase
end
assign builder_shared_adr = builder_array_muxed0;
assign builder_shared_dat_w = builder_array_muxed1;
assign builder_shared_sel = builder_array_muxed2;
assign builder_shared_cyc = builder_array_muxed3;
assign builder_shared_stb = builder_array_muxed4;
assign builder_shared_we = builder_array_muxed5;
assign builder_shared_cti = builder_array_muxed6;
assign builder_shared_bte = builder_array_muxed7;
assign main_interface0_adapted_interface_dat_r = builder_shared_dat_r;
assign main_interface1_adapted_interface_dat_r = builder_shared_dat_r;
assign main_interface0_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd0));
assign main_interface1_adapted_interface_ack = (builder_shared_ack & (builder_grant == 1'd1));
assign main_interface0_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd0));
assign main_interface1_adapted_interface_err = (builder_shared_err & (builder_grant == 1'd1));
assign builder_request = {main_interface1_adapted_interface_cyc, main_interface0_adapted_interface_cyc};
always @(*) begin
	builder_slave_sel <= 3'd0;
	builder_slave_sel[0] <= (builder_shared_adr[29:15] == 1'd0);
	builder_slave_sel[1] <= (builder_shared_adr[29:11] == 16'd32768);
	builder_slave_sel[2] <= (builder_shared_adr[29:14] == 16'd61440);
end
assign main_simsoc_ram_bus_adr = builder_shared_adr;
assign main_simsoc_ram_bus_dat_w = builder_shared_dat_w;
assign main_simsoc_ram_bus_sel = builder_shared_sel;
assign main_simsoc_ram_bus_stb = builder_shared_stb;
assign main_simsoc_ram_bus_we = builder_shared_we;
assign main_simsoc_ram_bus_cti = builder_shared_cti;
assign main_simsoc_ram_bus_bte = builder_shared_bte;
assign main_ram_bus_ram_bus_adr = builder_shared_adr;
assign main_ram_bus_ram_bus_dat_w = builder_shared_dat_w;
assign main_ram_bus_ram_bus_sel = builder_shared_sel;
assign main_ram_bus_ram_bus_stb = builder_shared_stb;
assign main_ram_bus_ram_bus_we = builder_shared_we;
assign main_ram_bus_ram_bus_cti = builder_shared_cti;
assign main_ram_bus_ram_bus_bte = builder_shared_bte;
assign builder_simsoc_wishbone_adr = builder_shared_adr;
assign builder_simsoc_wishbone_dat_w = builder_shared_dat_w;
assign builder_simsoc_wishbone_sel = builder_shared_sel;
assign builder_simsoc_wishbone_stb = builder_shared_stb;
assign builder_simsoc_wishbone_we = builder_shared_we;
assign builder_simsoc_wishbone_cti = builder_shared_cti;
assign builder_simsoc_wishbone_bte = builder_shared_bte;
assign main_simsoc_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[0]);
assign main_ram_bus_ram_bus_cyc = (builder_shared_cyc & builder_slave_sel[1]);
assign builder_simsoc_wishbone_cyc = (builder_shared_cyc & builder_slave_sel[2]);
always @(*) begin
	builder_shared_ack <= 1'd0;
	builder_shared_ack <= ((main_simsoc_ram_bus_ack | main_ram_bus_ram_bus_ack) | builder_simsoc_wishbone_ack);
	if (builder_done) begin
		builder_shared_ack <= 1'd1;
	end
end
assign builder_shared_err = ((main_simsoc_ram_bus_err | main_ram_bus_ram_bus_err) | builder_simsoc_wishbone_err);
always @(*) begin
	builder_shared_dat_r <= 32'd0;
	builder_shared_dat_r <= ((({32{builder_slave_sel_r[0]}} & main_simsoc_ram_bus_dat_r) | ({32{builder_slave_sel_r[1]}} & main_ram_bus_ram_bus_dat_r)) | ({32{builder_slave_sel_r[2]}} & builder_simsoc_wishbone_dat_r));
	if (builder_done) begin
		builder_shared_dat_r <= 32'd4294967295;
	end
end
assign builder_wait = ((builder_shared_stb & builder_shared_cyc) & (~builder_shared_ack));
always @(*) begin
	builder_error <= 1'd0;
	if (builder_done) begin
		builder_error <= 1'd1;
	end
end
assign builder_done = (builder_count == 1'd0);
assign builder_csr_bankarray_csrbank0_sel = (builder_csr_bankarray_interface0_bank_bus_adr[13:9] == 1'd0);
assign builder_csr_bankarray_csrbank0_reset0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_reset0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank0_reset0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank0_scratch0_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_scratch0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank0_scratch0_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank0_bus_errors_r = builder_csr_bankarray_interface0_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_re <= builder_csr_bankarray_interface0_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank0_bus_errors_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank0_sel & (builder_csr_bankarray_interface0_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank0_bus_errors_we <= (~builder_csr_bankarray_interface0_bank_bus_we);
	end
end
always @(*) begin
	main_soc_rst <= 1'd0;
	if (main_reset_re) begin
		main_soc_rst <= main_reset_storage[0];
	end
end
assign main_cpu_rst = main_reset_storage[1];
assign builder_csr_bankarray_csrbank0_reset0_w = main_reset_storage[1:0];
assign builder_csr_bankarray_csrbank0_scratch0_w = main_scratch_storage[31:0];
assign builder_csr_bankarray_csrbank0_bus_errors_w = main_bus_errors_status[31:0];
assign main_bus_errors_we = builder_csr_bankarray_csrbank0_bus_errors_we;
assign builder_csr_bankarray_sel = (builder_csr_bankarray_sram_bus_adr[13:9] == 1'd1);
always @(*) begin
	builder_csr_bankarray_sram_bus_dat_r <= 32'd0;
	if (builder_csr_bankarray_sel_r) begin
		builder_csr_bankarray_sram_bus_dat_r <= builder_csr_bankarray_dat_r;
	end
end
assign builder_csr_bankarray_adr = builder_csr_bankarray_sram_bus_adr[5:0];
assign builder_csr_bankarray_csrbank1_sel = (builder_csr_bankarray_interface1_bank_bus_adr[13:9] == 2'd2);
assign builder_csr_bankarray_csrbank1_load0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_load0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_load0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_load0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd0))) begin
		builder_csr_bankarray_csrbank1_load0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_reload0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_reload0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_reload0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_reload0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank1_reload0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_en0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_en0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank1_en0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_en0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank1_en0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_update_value0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_update_value0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank1_update_value0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_update_value0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank1_update_value0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_value_r = builder_csr_bankarray_interface1_bank_bus_dat_w[31:0];
always @(*) begin
	builder_csr_bankarray_csrbank1_value_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank1_value_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_value_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank1_value_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_ev_status_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank1_ev_status_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank1_ev_status_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_ev_pending_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank1_ev_pending_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank1_ev_pending_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank1_ev_enable0_r = builder_csr_bankarray_interface1_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank1_ev_enable0_re <= builder_csr_bankarray_interface1_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank1_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank1_sel & (builder_csr_bankarray_interface1_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank1_ev_enable0_we <= (~builder_csr_bankarray_interface1_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank1_load0_w = main_timer_load_storage[31:0];
assign builder_csr_bankarray_csrbank1_reload0_w = main_timer_reload_storage[31:0];
assign builder_csr_bankarray_csrbank1_en0_w = main_timer_en_storage;
assign builder_csr_bankarray_csrbank1_update_value0_w = main_timer_update_value_storage;
assign builder_csr_bankarray_csrbank1_value_w = main_timer_value_status[31:0];
assign main_timer_value_we = builder_csr_bankarray_csrbank1_value_we;
assign main_timer_status_status = main_timer_zero0;
assign builder_csr_bankarray_csrbank1_ev_status_w = main_timer_status_status;
assign main_timer_status_we = builder_csr_bankarray_csrbank1_ev_status_we;
assign main_timer_pending_status = main_timer_zero1;
assign builder_csr_bankarray_csrbank1_ev_pending_w = main_timer_pending_status;
assign main_timer_pending_we = builder_csr_bankarray_csrbank1_ev_pending_we;
assign main_timer_zero2 = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank1_ev_enable0_w = main_timer_enable_storage;
assign builder_csr_bankarray_csrbank2_sel = (builder_csr_bankarray_interface2_bank_bus_adr[13:9] == 2'd3);
assign main_uart_rxtx_r = builder_csr_bankarray_interface2_bank_bus_dat_w[7:0];
always @(*) begin
	main_uart_rxtx_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		main_uart_rxtx_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	main_uart_rxtx_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd0))) begin
		main_uart_rxtx_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_txfull_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_txfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_txfull_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_txfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 1'd1))) begin
		builder_csr_bankarray_csrbank2_txfull_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_rxempty_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_rxempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_rxempty_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_rxempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd2))) begin
		builder_csr_bankarray_csrbank2_rxempty_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_ev_status_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_ev_status_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_status_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 2'd3))) begin
		builder_csr_bankarray_csrbank2_ev_status_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_ev_pending_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_ev_pending_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_pending_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd4))) begin
		builder_csr_bankarray_csrbank2_ev_pending_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_ev_enable0_r = builder_csr_bankarray_interface2_bank_bus_dat_w[1:0];
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_ev_enable0_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd5))) begin
		builder_csr_bankarray_csrbank2_ev_enable0_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_txempty_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_txempty_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_txempty_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_txempty_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd6))) begin
		builder_csr_bankarray_csrbank2_txempty_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
assign builder_csr_bankarray_csrbank2_rxfull_r = builder_csr_bankarray_interface2_bank_bus_dat_w[0];
always @(*) begin
	builder_csr_bankarray_csrbank2_rxfull_re <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_rxfull_re <= builder_csr_bankarray_interface2_bank_bus_we;
	end
end
always @(*) begin
	builder_csr_bankarray_csrbank2_rxfull_we <= 1'd0;
	if ((builder_csr_bankarray_csrbank2_sel & (builder_csr_bankarray_interface2_bank_bus_adr[8:0] == 3'd7))) begin
		builder_csr_bankarray_csrbank2_rxfull_we <= (~builder_csr_bankarray_interface2_bank_bus_we);
	end
end
assign builder_csr_bankarray_csrbank2_txfull_w = main_uart_txfull_status;
assign main_uart_txfull_we = builder_csr_bankarray_csrbank2_txfull_we;
assign builder_csr_bankarray_csrbank2_rxempty_w = main_uart_rxempty_status;
assign main_uart_rxempty_we = builder_csr_bankarray_csrbank2_rxempty_we;
always @(*) begin
	main_uart_status_status <= 2'd0;
	main_uart_status_status[0] <= main_uart_tx0;
	main_uart_status_status[1] <= main_uart_rx0;
end
assign builder_csr_bankarray_csrbank2_ev_status_w = main_uart_status_status[1:0];
assign main_uart_status_we = builder_csr_bankarray_csrbank2_ev_status_we;
always @(*) begin
	main_uart_pending_status <= 2'd0;
	main_uart_pending_status[0] <= main_uart_tx1;
	main_uart_pending_status[1] <= main_uart_rx1;
end
assign builder_csr_bankarray_csrbank2_ev_pending_w = main_uart_pending_status[1:0];
assign main_uart_pending_we = builder_csr_bankarray_csrbank2_ev_pending_we;
assign main_uart_tx2 = main_uart_enable_storage[0];
assign main_uart_rx2 = main_uart_enable_storage[1];
assign builder_csr_bankarray_csrbank2_ev_enable0_w = main_uart_enable_storage[1:0];
assign builder_csr_bankarray_csrbank2_txempty_w = main_uart_txempty_status;
assign main_uart_txempty_we = builder_csr_bankarray_csrbank2_txempty_we;
assign builder_csr_bankarray_csrbank2_rxfull_w = main_uart_rxfull_status;
assign main_uart_rxfull_we = builder_csr_bankarray_csrbank2_rxfull_we;
assign builder_csr_interconnect_adr = builder_simsoc_adr;
assign builder_csr_interconnect_we = builder_simsoc_we;
assign builder_csr_interconnect_dat_w = builder_simsoc_dat_w;
assign builder_simsoc_dat_r = builder_csr_interconnect_dat_r;
assign builder_csr_bankarray_interface0_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface1_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface2_bank_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_sram_bus_adr = builder_csr_interconnect_adr;
assign builder_csr_bankarray_interface0_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface1_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface2_bank_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_sram_bus_we = builder_csr_interconnect_we;
assign builder_csr_bankarray_interface0_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface1_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_interface2_bank_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_bankarray_sram_bus_dat_w = builder_csr_interconnect_dat_w;
assign builder_csr_interconnect_dat_r = (((builder_csr_bankarray_interface0_bank_bus_dat_r | builder_csr_bankarray_interface1_bank_bus_dat_r) | builder_csr_bankarray_interface2_bank_bus_dat_r) | builder_csr_bankarray_sram_bus_dat_r);
always @(*) begin
	builder_array_muxed0 <= 30'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed0 <= main_interface0_adapted_interface_adr;
		end
		default: begin
			builder_array_muxed0 <= main_interface1_adapted_interface_adr;
		end
	endcase
end
always @(*) begin
	builder_array_muxed1 <= 32'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed1 <= main_interface0_adapted_interface_dat_w;
		end
		default: begin
			builder_array_muxed1 <= main_interface1_adapted_interface_dat_w;
		end
	endcase
end
always @(*) begin
	builder_array_muxed2 <= 4'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed2 <= main_interface0_adapted_interface_sel;
		end
		default: begin
			builder_array_muxed2 <= main_interface1_adapted_interface_sel;
		end
	endcase
end
always @(*) begin
	builder_array_muxed3 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed3 <= main_interface0_adapted_interface_cyc;
		end
		default: begin
			builder_array_muxed3 <= main_interface1_adapted_interface_cyc;
		end
	endcase
end
always @(*) begin
	builder_array_muxed4 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed4 <= main_interface0_adapted_interface_stb;
		end
		default: begin
			builder_array_muxed4 <= main_interface1_adapted_interface_stb;
		end
	endcase
end
always @(*) begin
	builder_array_muxed5 <= 1'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed5 <= main_interface0_adapted_interface_we;
		end
		default: begin
			builder_array_muxed5 <= main_interface1_adapted_interface_we;
		end
	endcase
end
always @(*) begin
	builder_array_muxed6 <= 3'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed6 <= main_interface0_adapted_interface_cti;
		end
		default: begin
			builder_array_muxed6 <= main_interface1_adapted_interface_cti;
		end
	endcase
end
always @(*) begin
	builder_array_muxed7 <= 2'd0;
	case (builder_grant)
		1'd0: begin
			builder_array_muxed7 <= main_interface0_adapted_interface_bte;
		end
		default: begin
			builder_array_muxed7 <= main_interface1_adapted_interface_bte;
		end
	endcase
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge por_clk) begin
	main_int_rst <= 1'd0;
end

always @(posedge sys_clk_1) begin
	if (((~main_axi2wishbone0_axi2axi_lite_pipe_valid_source_valid) | main_axi2wishbone0_axi2axi_lite_pipe_valid_source_ready)) begin
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_valid <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_valid;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_first <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_first;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_last <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_last;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_addr <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_addr;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_burst <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_burst;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_len <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_len;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_size <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_size;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_lock <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_lock;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_prot <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_prot;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_cache <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_cache;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_qos <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_qos;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_region <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_payload_region;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_id <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_id;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_dest <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_dest;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_param_user <= main_axi2wishbone0_axi2axi_lite_pipe_valid_sink_param_user;
	end
	if ((main_axi2wishbone0_axi2axi_lite_ax_beat_valid & main_axi2wishbone0_axi2axi_lite_ax_beat_ready)) begin
		if (main_axi2wishbone0_axi2axi_lite_ax_beat_last) begin
			main_axi2wishbone0_axi2axi_lite_beat_count <= 1'd0;
			main_axi2wishbone0_axi2axi_lite_beat_offset <= 1'd0;
		end else begin
			main_axi2wishbone0_axi2axi_lite_beat_count <= (main_axi2wishbone0_axi2axi_lite_beat_count + 1'd1);
			if ((((main_axi2wishbone0_axi2axi_lite_source_source_payload_burst == 1'd1) & 1'd1) | ((main_axi2wishbone0_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1))) begin
				main_axi2wishbone0_axi2axi_lite_beat_offset <= (main_axi2wishbone0_axi2axi_lite_beat_offset + $signed({1'd0, main_axi2wishbone0_axi2axi_lite_beat_size}));
			end
		end
		if (((main_axi2wishbone0_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1)) begin
			if (((main_axi2wishbone0_axi2axi_lite_ax_beat_payload_addr & main_axi2wishbone0_axi2axi_lite_beat_wrap) == main_axi2wishbone0_axi2axi_lite_beat_wrap)) begin
				main_axi2wishbone0_axi2axi_lite_beat_offset <= (main_axi2wishbone0_axi2axi_lite_beat_offset - $signed({1'd0, main_axi2wishbone0_axi2axi_lite_beat_wrap}));
			end
		end
	end
	builder_simsoc_axi2axilite0_state <= builder_simsoc_axi2axilite0_next_state;
	if (main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value_ce0) begin
		main_axi2wishbone0_axi2axi_lite_cmd_done <= main_axi2wishbone0_axi2axi_lite_cmd_done_axi2axilite0_next_value0;
	end
	if (main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value_ce1) begin
		main_axi2wishbone0_axi2axi_lite_last_ar_aw_n <= main_axi2wishbone0_axi2axi_lite_last_ar_aw_n_axi2axilite0_next_value1;
	end
	builder_simsoc_axilite2wishbone0_state <= builder_simsoc_axilite2wishbone0_next_state;
	if (main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value_ce0) begin
		main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n <= main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone0_next_value0;
	end
	if (main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value_ce1) begin
		main_axi2wishbone0_axi_lite2wishbone_data <= main_axi2wishbone0_axi_lite2wishbone_data_axilite2wishbone0_next_value1;
	end
	if (((~main_axi2wishbone1_axi2axi_lite_pipe_valid_source_valid) | main_axi2wishbone1_axi2axi_lite_pipe_valid_source_ready)) begin
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_valid <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_valid;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_first <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_first;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_last <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_last;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_addr <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_addr;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_burst <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_burst;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_len <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_len;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_size <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_size;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_lock <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_lock;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_prot <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_prot;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_cache <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_cache;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_qos <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_qos;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_region <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_payload_region;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_id <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_id;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_dest <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_dest;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_param_user <= main_axi2wishbone1_axi2axi_lite_pipe_valid_sink_param_user;
	end
	if ((main_axi2wishbone1_axi2axi_lite_ax_beat_valid & main_axi2wishbone1_axi2axi_lite_ax_beat_ready)) begin
		if (main_axi2wishbone1_axi2axi_lite_ax_beat_last) begin
			main_axi2wishbone1_axi2axi_lite_beat_count <= 1'd0;
			main_axi2wishbone1_axi2axi_lite_beat_offset <= 1'd0;
		end else begin
			main_axi2wishbone1_axi2axi_lite_beat_count <= (main_axi2wishbone1_axi2axi_lite_beat_count + 1'd1);
			if ((((main_axi2wishbone1_axi2axi_lite_source_source_payload_burst == 1'd1) & 1'd1) | ((main_axi2wishbone1_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1))) begin
				main_axi2wishbone1_axi2axi_lite_beat_offset <= (main_axi2wishbone1_axi2axi_lite_beat_offset + $signed({1'd0, main_axi2wishbone1_axi2axi_lite_beat_size}));
			end
		end
		if (((main_axi2wishbone1_axi2axi_lite_source_source_payload_burst == 2'd2) & 1'd1)) begin
			if (((main_axi2wishbone1_axi2axi_lite_ax_beat_payload_addr & main_axi2wishbone1_axi2axi_lite_beat_wrap) == main_axi2wishbone1_axi2axi_lite_beat_wrap)) begin
				main_axi2wishbone1_axi2axi_lite_beat_offset <= (main_axi2wishbone1_axi2axi_lite_beat_offset - $signed({1'd0, main_axi2wishbone1_axi2axi_lite_beat_wrap}));
			end
		end
	end
	builder_simsoc_axi2axilite1_state <= builder_simsoc_axi2axilite1_next_state;
	if (main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value_ce0) begin
		main_axi2wishbone1_axi2axi_lite_cmd_done <= main_axi2wishbone1_axi2axi_lite_cmd_done_axi2axilite1_next_value0;
	end
	if (main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value_ce1) begin
		main_axi2wishbone1_axi2axi_lite_last_ar_aw_n <= main_axi2wishbone1_axi2axi_lite_last_ar_aw_n_axi2axilite1_next_value1;
	end
	builder_simsoc_axilite2wishbone1_state <= builder_simsoc_axilite2wishbone1_next_state;
	if (main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value_ce0) begin
		main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n <= main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n_axilite2wishbone1_next_value0;
	end
	if (main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value_ce1) begin
		main_axi2wishbone1_axi_lite2wishbone_data <= main_axi2wishbone1_axi_lite2wishbone_data_axilite2wishbone1_next_value1;
	end
	if ((main_bus_errors != 32'd4294967295)) begin
		if (main_bus_error) begin
			main_bus_errors <= (main_bus_errors + 1'd1);
		end
	end
	main_simsoc_ram_bus_ack <= 1'd0;
	if (((main_simsoc_ram_bus_cyc & main_simsoc_ram_bus_stb) & ((~main_simsoc_ram_bus_ack) | main_simsoc_adr_burst))) begin
		main_simsoc_ram_bus_ack <= 1'd1;
	end
	main_ram_bus_ram_bus_ack <= 1'd0;
	if (((main_ram_bus_ram_bus_cyc & main_ram_bus_ram_bus_stb) & ((~main_ram_bus_ram_bus_ack) | main_ram_adr_burst))) begin
		main_ram_bus_ram_bus_ack <= 1'd1;
	end
	if (main_uart_tx_clear) begin
		main_uart_tx_pending <= 1'd0;
	end
	main_uart_tx_trigger_d <= main_uart_tx_trigger;
	if ((main_uart_tx_trigger & (~main_uart_tx_trigger_d))) begin
		main_uart_tx_pending <= 1'd1;
	end
	if (main_uart_rx_clear) begin
		main_uart_rx_pending <= 1'd0;
	end
	main_uart_rx_trigger_d <= main_uart_rx_trigger;
	if ((main_uart_rx_trigger & (~main_uart_rx_trigger_d))) begin
		main_uart_rx_pending <= 1'd1;
	end
	if (main_uart_tx_fifo_syncfifo_re) begin
		main_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (main_uart_tx_fifo_re) begin
			main_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
		main_uart_tx_fifo_produce <= (main_uart_tx_fifo_produce + 1'd1);
	end
	if (main_uart_tx_fifo_do_read) begin
		main_uart_tx_fifo_consume <= (main_uart_tx_fifo_consume + 1'd1);
	end
	if (((main_uart_tx_fifo_syncfifo_we & main_uart_tx_fifo_syncfifo_writable) & (~main_uart_tx_fifo_replace))) begin
		if ((~main_uart_tx_fifo_do_read)) begin
			main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_uart_tx_fifo_do_read) begin
			main_uart_tx_fifo_level0 <= (main_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (main_uart_rx_fifo_syncfifo_re) begin
		main_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (main_uart_rx_fifo_re) begin
			main_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
		main_uart_rx_fifo_produce <= (main_uart_rx_fifo_produce + 1'd1);
	end
	if (main_uart_rx_fifo_do_read) begin
		main_uart_rx_fifo_consume <= (main_uart_rx_fifo_consume + 1'd1);
	end
	if (((main_uart_rx_fifo_syncfifo_we & main_uart_rx_fifo_syncfifo_writable) & (~main_uart_rx_fifo_replace))) begin
		if ((~main_uart_rx_fifo_do_read)) begin
			main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (main_uart_rx_fifo_do_read) begin
			main_uart_rx_fifo_level0 <= (main_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (main_timer_en_storage) begin
		if ((main_timer_value == 1'd0)) begin
			main_timer_value <= main_timer_reload_storage;
		end else begin
			main_timer_value <= (main_timer_value - 1'd1);
		end
	end else begin
		main_timer_value <= main_timer_load_storage;
	end
	if (main_timer_update_value_re) begin
		main_timer_value_status <= main_timer_value;
	end
	if (main_timer_zero_clear) begin
		main_timer_zero_pending <= 1'd0;
	end
	main_timer_zero_trigger_d <= main_timer_zero_trigger;
	if ((main_timer_zero_trigger & (~main_timer_zero_trigger_d))) begin
		main_timer_zero_pending <= 1'd1;
	end
	builder_simsoc_state <= builder_simsoc_next_state;
	case (builder_grant)
		1'd0: begin
			if ((~builder_request[0])) begin
				if (builder_request[1]) begin
					builder_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~builder_request[1])) begin
				if (builder_request[0]) begin
					builder_grant <= 1'd0;
				end
			end
		end
	endcase
	builder_slave_sel_r <= builder_slave_sel;
	if (builder_wait) begin
		if ((~builder_done)) begin
			builder_count <= (builder_count - 1'd1);
		end
	end else begin
		builder_count <= 20'd1000000;
	end
	builder_csr_bankarray_interface0_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank0_sel) begin
		case (builder_csr_bankarray_interface0_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_reset0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_scratch0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface0_bank_bus_dat_r <= builder_csr_bankarray_csrbank0_bus_errors_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank0_reset0_re) begin
		main_reset_storage[1:0] <= builder_csr_bankarray_csrbank0_reset0_r;
	end
	main_reset_re <= builder_csr_bankarray_csrbank0_reset0_re;
	if (builder_csr_bankarray_csrbank0_scratch0_re) begin
		main_scratch_storage[31:0] <= builder_csr_bankarray_csrbank0_scratch0_r;
	end
	main_scratch_re <= builder_csr_bankarray_csrbank0_scratch0_re;
	main_bus_errors_re <= builder_csr_bankarray_csrbank0_bus_errors_re;
	builder_csr_bankarray_sel_r <= builder_csr_bankarray_sel;
	builder_csr_bankarray_interface1_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank1_sel) begin
		case (builder_csr_bankarray_interface1_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_load0_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_reload0_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_en0_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_update_value0_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_value_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_status_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_pending_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface1_bank_bus_dat_r <= builder_csr_bankarray_csrbank1_ev_enable0_w;
			end
		endcase
	end
	if (builder_csr_bankarray_csrbank1_load0_re) begin
		main_timer_load_storage[31:0] <= builder_csr_bankarray_csrbank1_load0_r;
	end
	main_timer_load_re <= builder_csr_bankarray_csrbank1_load0_re;
	if (builder_csr_bankarray_csrbank1_reload0_re) begin
		main_timer_reload_storage[31:0] <= builder_csr_bankarray_csrbank1_reload0_r;
	end
	main_timer_reload_re <= builder_csr_bankarray_csrbank1_reload0_re;
	if (builder_csr_bankarray_csrbank1_en0_re) begin
		main_timer_en_storage <= builder_csr_bankarray_csrbank1_en0_r;
	end
	main_timer_en_re <= builder_csr_bankarray_csrbank1_en0_re;
	if (builder_csr_bankarray_csrbank1_update_value0_re) begin
		main_timer_update_value_storage <= builder_csr_bankarray_csrbank1_update_value0_r;
	end
	main_timer_update_value_re <= builder_csr_bankarray_csrbank1_update_value0_re;
	main_timer_value_re <= builder_csr_bankarray_csrbank1_value_re;
	main_timer_status_re <= builder_csr_bankarray_csrbank1_ev_status_re;
	if (builder_csr_bankarray_csrbank1_ev_pending_re) begin
		main_timer_pending_r <= builder_csr_bankarray_csrbank1_ev_pending_r;
	end
	main_timer_pending_re <= builder_csr_bankarray_csrbank1_ev_pending_re;
	if (builder_csr_bankarray_csrbank1_ev_enable0_re) begin
		main_timer_enable_storage <= builder_csr_bankarray_csrbank1_ev_enable0_r;
	end
	main_timer_enable_re <= builder_csr_bankarray_csrbank1_ev_enable0_re;
	builder_csr_bankarray_interface2_bank_bus_dat_r <= 1'd0;
	if (builder_csr_bankarray_csrbank2_sel) begin
		case (builder_csr_bankarray_interface2_bank_bus_adr[8:0])
			1'd0: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= main_uart_rxtx_w;
			end
			1'd1: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_txfull_w;
			end
			2'd2: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rxempty_w;
			end
			2'd3: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_status_w;
			end
			3'd4: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_pending_w;
			end
			3'd5: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_ev_enable0_w;
			end
			3'd6: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_txempty_w;
			end
			3'd7: begin
				builder_csr_bankarray_interface2_bank_bus_dat_r <= builder_csr_bankarray_csrbank2_rxfull_w;
			end
		endcase
	end
	main_uart_txfull_re <= builder_csr_bankarray_csrbank2_txfull_re;
	main_uart_rxempty_re <= builder_csr_bankarray_csrbank2_rxempty_re;
	main_uart_status_re <= builder_csr_bankarray_csrbank2_ev_status_re;
	if (builder_csr_bankarray_csrbank2_ev_pending_re) begin
		main_uart_pending_r[1:0] <= builder_csr_bankarray_csrbank2_ev_pending_r;
	end
	main_uart_pending_re <= builder_csr_bankarray_csrbank2_ev_pending_re;
	if (builder_csr_bankarray_csrbank2_ev_enable0_re) begin
		main_uart_enable_storage[1:0] <= builder_csr_bankarray_csrbank2_ev_enable0_r;
	end
	main_uart_enable_re <= builder_csr_bankarray_csrbank2_ev_enable0_re;
	main_uart_txempty_re <= builder_csr_bankarray_csrbank2_txempty_re;
	main_uart_rxfull_re <= builder_csr_bankarray_csrbank2_rxfull_re;
	if (sys_rst) begin
		main_reset_storage <= 2'd0;
		main_reset_re <= 1'd0;
		main_scratch_storage <= 32'd305419896;
		main_scratch_re <= 1'd0;
		main_bus_errors_re <= 1'd0;
		main_bus_errors <= 32'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_valid <= 1'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_addr <= 32'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_burst <= 2'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_len <= 8'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_size <= 4'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_lock <= 2'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_prot <= 3'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_cache <= 4'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_qos <= 4'd0;
		main_axi2wishbone0_axi2axi_lite_pipe_valid_source_payload_region <= 4'd0;
		main_axi2wishbone0_axi2axi_lite_beat_count <= 8'd0;
		main_axi2wishbone0_axi2axi_lite_beat_offset <= 13'd0;
		main_axi2wishbone0_axi2axi_lite_cmd_done <= 1'd0;
		main_axi2wishbone0_axi2axi_lite_last_ar_aw_n <= 1'd0;
		main_axi2wishbone0_axi_lite2wishbone_data <= 32'd0;
		main_axi2wishbone0_axi_lite2wishbone_last_ar_aw_n <= 1'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_valid <= 1'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_addr <= 32'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_burst <= 2'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_len <= 8'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_size <= 4'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_lock <= 2'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_prot <= 3'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_cache <= 4'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_qos <= 4'd0;
		main_axi2wishbone1_axi2axi_lite_pipe_valid_source_payload_region <= 4'd0;
		main_axi2wishbone1_axi2axi_lite_beat_count <= 8'd0;
		main_axi2wishbone1_axi2axi_lite_beat_offset <= 13'd0;
		main_axi2wishbone1_axi2axi_lite_cmd_done <= 1'd0;
		main_axi2wishbone1_axi2axi_lite_last_ar_aw_n <= 1'd0;
		main_axi2wishbone1_axi_lite2wishbone_data <= 32'd0;
		main_axi2wishbone1_axi_lite2wishbone_last_ar_aw_n <= 1'd0;
		main_simsoc_ram_bus_ack <= 1'd0;
		main_ram_bus_ram_bus_ack <= 1'd0;
		main_uart_txfull_re <= 1'd0;
		main_uart_rxempty_re <= 1'd0;
		main_uart_tx_pending <= 1'd0;
		main_uart_tx_trigger_d <= 1'd0;
		main_uart_rx_pending <= 1'd0;
		main_uart_rx_trigger_d <= 1'd0;
		main_uart_status_re <= 1'd0;
		main_uart_pending_re <= 1'd0;
		main_uart_pending_r <= 2'd0;
		main_uart_enable_storage <= 2'd0;
		main_uart_enable_re <= 1'd0;
		main_uart_txempty_re <= 1'd0;
		main_uart_rxfull_re <= 1'd0;
		main_uart_tx_fifo_readable <= 1'd0;
		main_uart_tx_fifo_level0 <= 5'd0;
		main_uart_tx_fifo_produce <= 4'd0;
		main_uart_tx_fifo_consume <= 4'd0;
		main_uart_rx_fifo_readable <= 1'd0;
		main_uart_rx_fifo_level0 <= 5'd0;
		main_uart_rx_fifo_produce <= 4'd0;
		main_uart_rx_fifo_consume <= 4'd0;
		main_timer_load_storage <= 32'd0;
		main_timer_load_re <= 1'd0;
		main_timer_reload_storage <= 32'd0;
		main_timer_reload_re <= 1'd0;
		main_timer_en_storage <= 1'd0;
		main_timer_en_re <= 1'd0;
		main_timer_update_value_storage <= 1'd0;
		main_timer_update_value_re <= 1'd0;
		main_timer_value_status <= 32'd0;
		main_timer_value_re <= 1'd0;
		main_timer_zero_pending <= 1'd0;
		main_timer_zero_trigger_d <= 1'd0;
		main_timer_status_re <= 1'd0;
		main_timer_pending_re <= 1'd0;
		main_timer_pending_r <= 1'd0;
		main_timer_enable_storage <= 1'd0;
		main_timer_enable_re <= 1'd0;
		main_timer_value <= 32'd0;
		builder_grant <= 1'd0;
		builder_slave_sel_r <= 3'd0;
		builder_count <= 20'd1000000;
		builder_csr_bankarray_sel_r <= 1'd0;
		builder_simsoc_axi2axilite0_state <= 2'd0;
		builder_simsoc_axilite2wishbone0_state <= 3'd0;
		builder_simsoc_axi2axilite1_state <= 2'd0;
		builder_simsoc_axilite2wishbone1_state <= 3'd0;
		builder_simsoc_state <= 1'd0;
	end
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
// Memory rom: 5722-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [31:0] rom[0:5721];
initial begin
	$readmemh("sim_rom.init", rom);
end
reg [31:0] rom_dat0;
always @(posedge sys_clk_1) begin
	rom_dat0 <= rom[main_simsoc_adr];
end
assign main_simsoc_dat_r = rom_dat0;


//------------------------------------------------------------------------------
// Memory sram: 2048-words x 32-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Write-First | Write-Granularity: 8 
reg [31:0] sram[0:2047];
initial begin
	$readmemh("sim_sram.init", sram);
end
reg [10:0] sram_adr0;
always @(posedge sys_clk_1) begin
	if (main_ram_we[0])
		sram[main_ram_adr][7:0] <= main_ram_dat_w[7:0];
	if (main_ram_we[1])
		sram[main_ram_adr][15:8] <= main_ram_dat_w[15:8];
	if (main_ram_we[2])
		sram[main_ram_adr][23:16] <= main_ram_dat_w[23:16];
	if (main_ram_we[3])
		sram[main_ram_adr][31:24] <= main_ram_dat_w[31:24];
	sram_adr0 <= main_ram_adr;
end
assign main_ram_dat_r = sram[sram_adr0];


//------------------------------------------------------------------------------
// Memory mem: 37-words x 8-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: ---- | 
reg [7:0] mem[0:36];
initial begin
	$readmemh("sim_mem.init", mem);
end
reg [5:0] mem_adr0;
always @(posedge sys_clk_1) begin
	mem_adr0 <= builder_csr_bankarray_adr;
end
assign builder_csr_bankarray_dat_r = mem[mem_adr0];


//------------------------------------------------------------------------------
// Memory storage: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage[0:15];
reg [9:0] storage_dat0;
reg [9:0] storage_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_wrport_we)
		storage[main_uart_tx_fifo_wrport_adr] <= main_uart_tx_fifo_wrport_dat_w;
	storage_dat0 <= storage[main_uart_tx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_tx_fifo_rdport_re)
		storage_dat1 <= storage[main_uart_tx_fifo_rdport_adr];
end
assign main_uart_tx_fifo_wrport_dat_r = storage_dat0;
assign main_uart_tx_fifo_rdport_dat_r = storage_dat1;


//------------------------------------------------------------------------------
// Memory storage_1: 16-words x 10-bit
//------------------------------------------------------------------------------
// Port 0 | Read: Sync  | Write: Sync | Mode: Read-First  | Write-Granularity: 10 
// Port 1 | Read: Sync  | Write: ---- | 
reg [9:0] storage_1[0:15];
reg [9:0] storage_1_dat0;
reg [9:0] storage_1_dat1;
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_wrport_we)
		storage_1[main_uart_rx_fifo_wrport_adr] <= main_uart_rx_fifo_wrport_dat_w;
	storage_1_dat0 <= storage_1[main_uart_rx_fifo_wrport_adr];
end
always @(posedge sys_clk_1) begin
	if (main_uart_rx_fifo_rdport_re)
		storage_1_dat1 <= storage_1[main_uart_rx_fifo_rdport_adr];
end
assign main_uart_rx_fifo_wrport_dat_r = storage_1_dat0;
assign main_uart_rx_fifo_rdport_dat_r = storage_1_dat1;


VexRiscv VexRiscv(
	.clk(sys_clk_1),
	.dBusAxi_ar_ready(main_vexriscv_dbus_ar_ready),
	.dBusAxi_aw_ready(main_vexriscv_dbus_aw_ready),
	.dBusAxi_b_payload_id(main_vexriscv_dbus_b_param_id),
	.dBusAxi_b_payload_resp(main_vexriscv_dbus_b_payload_resp),
	.dBusAxi_b_valid(main_vexriscv_dbus_b_valid),
	.dBusAxi_r_payload_data(main_vexriscv_dbus_r_payload_data),
	.dBusAxi_r_payload_id(main_vexriscv_dbus_ar_param_id),
	.dBusAxi_r_payload_last(main_vexriscv_dbus_ar_last),
	.dBusAxi_r_payload_resp(main_vexriscv_dbus_r_payload_resp),
	.dBusAxi_r_valid(main_vexriscv_dbus_r_valid),
	.dBusAxi_w_ready(main_vexriscv_dbus_w_ready),
	.debugReset(main_vexriscv7),
	.externalInterrupt(main_vexriscv_interrupt),
	.iBusAxi_ar_ready(main_vexriscv_ibus_ar_ready),
	.iBusAxi_r_payload_data(main_vexriscv_ibus_r_payload_data),
	.iBusAxi_r_payload_id(main_vexriscv_ibus_r_param_id),
	.iBusAxi_r_payload_last(main_vexriscv_ibus_r_last),
	.iBusAxi_r_payload_resp(main_vexriscv_ibus_r_payload_resp),
	.iBusAxi_r_valid(main_vexriscv_ibus_r_valid),
	.jtag_tck(main_vexriscv6),
	.jtag_tdi(main_vexriscv4),
	.jtag_tms(main_vexriscv3),
	.reset((sys_rst | main_vexriscv_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusAxi_ar_payload_addr(main_vexriscv_dbus_ar_payload_addr),
	.dBusAxi_ar_payload_burst(main_vexriscv_dbus_ar_payload_burst),
	.dBusAxi_ar_payload_cache(main_vexriscv_dbus_ar_payload_cache),
	.dBusAxi_ar_payload_id(main_vexriscv_dbus_ar_param_id),
	.dBusAxi_ar_payload_len(main_vexriscv_dbus_ar_payload_len),
	.dBusAxi_ar_payload_lock(main_vexriscv_dbus_ar_payload_lock),
	.dBusAxi_ar_payload_prot(main_vexriscv_dbus_ar_payload_prot),
	.dBusAxi_ar_payload_qos(main_vexriscv_dbus_ar_payload_qos),
	.dBusAxi_ar_payload_region(main_vexriscv2),
	.dBusAxi_ar_payload_size(main_vexriscv_dbus_ar_payload_size),
	.dBusAxi_ar_valid(main_vexriscv_dbus_ar_valid),
	.dBusAxi_aw_payload_addr(main_vexriscv_dbus_aw_payload_addr),
	.dBusAxi_aw_payload_burst(main_vexriscv_dbus_aw_payload_burst),
	.dBusAxi_aw_payload_cache(main_vexriscv_dbus_aw_payload_cache),
	.dBusAxi_aw_payload_id(main_vexriscv_dbus_aw_param_id),
	.dBusAxi_aw_payload_len(main_vexriscv_dbus_aw_payload_len),
	.dBusAxi_aw_payload_lock(main_vexriscv_dbus_aw_payload_lock),
	.dBusAxi_aw_payload_prot(main_vexriscv_dbus_aw_payload_prot),
	.dBusAxi_aw_payload_qos(main_vexriscv_dbus_aw_payload_qos),
	.dBusAxi_aw_payload_region(main_vexriscv1),
	.dBusAxi_aw_payload_size(main_vexriscv_dbus_aw_payload_size),
	.dBusAxi_aw_valid(main_vexriscv_dbus_aw_valid),
	.dBusAxi_b_ready(main_vexriscv_dbus_b_ready),
	.dBusAxi_r_ready(main_vexriscv_dbus_r_ready),
	.dBusAxi_w_payload_data(main_vexriscv_dbus_w_payload_data),
	.dBusAxi_w_payload_last(main_vexriscv_dbus_w_last),
	.dBusAxi_w_payload_strb(main_vexriscv_dbus_w_payload_strb),
	.dBusAxi_w_valid(main_vexriscv_dbus_w_valid),
	.iBusAxi_ar_payload_addr(main_vexriscv_ibus_ar_payload_addr),
	.iBusAxi_ar_payload_burst(main_vexriscv_ibus_ar_payload_burst),
	.iBusAxi_ar_payload_cache(main_vexriscv_ibus_ar_payload_cache),
	.iBusAxi_ar_payload_id(main_vexriscv_ibus_ar_param_id),
	.iBusAxi_ar_payload_len(main_vexriscv_ibus_ar_payload_len),
	.iBusAxi_ar_payload_lock(main_vexriscv_ibus_ar_payload_lock),
	.iBusAxi_ar_payload_prot(main_vexriscv_ibus_ar_payload_prot),
	.iBusAxi_ar_payload_qos(main_vexriscv_ibus_ar_payload_qos),
	.iBusAxi_ar_payload_region(main_vexriscv0),
	.iBusAxi_ar_payload_size(main_vexriscv_ibus_ar_payload_size),
	.iBusAxi_ar_valid(main_vexriscv_ibus_ar_valid),
	.iBusAxi_r_ready(main_vexriscv_ibus_r_ready),
	.jtag_tdo(main_vexriscv5)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2022-10-17 17:44:35.
//------------------------------------------------------------------------------
